package ir.viratech.pond_ms.api.layer.base;

import static ir.viratech.commons.api.field_info.FieldInfoContextProvider.getFieldInfoContextInstance;
import ir.viratech.pond_ms.api.layer.dto.LayerFullDTO;
import ir.viratech.pond_ms.model.layer.Layer;

import java.util.Map;

import com.fasterxml.jackson.annotation.JsonProperty;


/**
 * A base DTO for class "Layer".
 * Do not edit this file.
 * It is an automatically generated class.
 *
 */
public abstract class BaseLayerFullDTO extends ir.viratech.commons.api.dto.AbstractFullDTO<Layer> {
	
	
	/**
	 * 
	 * Base FieldInfoContext for "LayerFullDTO".
	 *
	 */
	public static abstract class BaseFieldInfoContext extends ir.viratech.commons.api.search.field.AbstractFieldInfoContext<LayerFullDTO> {
		
		
		// =========== BEGIN createFieldInfo methods ===========
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "uid".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Uid(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "name".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Name(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "description".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Description(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "creationDate".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_CreationDate(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Timestamp(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "type".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Type(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "childCount".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_ChildCount(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Integer(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "formSchemaKey".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_FormSchemaKey(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "vectorObjectsType".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_VectorObjectsType(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "secret".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Secret(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Boolean(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "isPond".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_IsPond(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Boolean(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "icon".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Icon(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "color".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Color(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "width".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Width(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "fill".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Fill(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "isLabeled".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_IsLabeled(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Boolean(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * Creates an EntityByDtoFinder for the DTO property "gradient".
		 * The created object finds entities of type "ir.viratech.pond_ms.model.gradient.Gradient" 
		 * by DTO's of type "ir.viratech.pond_ms.api.gradient.dto.GradientLightDTO".
		 * @return the created EntityByDtoFinder
		 */
		protected abstract ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.gradient.Gradient, ir.viratech.pond_ms.api.gradient.dto.GradientLightDTO> createEntityByDtoFinder_Gradient();
		
		private ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.gradient.Gradient, ir.viratech.pond_ms.api.gradient.dto.GradientLightDTO> entityByDtoFinder_Gradient;
		
		/**
		 * Getter for the previously created EntityByDtoFinder for property "gradient".
		 * @return the previously created EntityByDtoFinder object 
		 */
		public final ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.gradient.Gradient, ir.viratech.pond_ms.api.gradient.dto.GradientLightDTO> getEntityByDtoFinder_Gradient() {
			return this.entityByDtoFinder_Gradient;
		}
		
		/**
		 * Finds entities of type "ir.viratech.pond_ms.model.gradient.Gradient" 
		 * by DTO's of type "ir.viratech.pond_ms.api.gradient.dto.GradientLightDTO".
		 * It is targeted for the DTO property: gradient
		 * @param gradientDto 
		 *		the given dto by which the entity should be found
		 * @return the found entity
		 * @throws ir.viratech.commons.api.search.InvalidDtoException
		 * 		If the given dto is not valid or is not representing an internal entity
		 */
		public final ir.viratech.pond_ms.model.gradient.Gradient findByDto_Gradient(ir.viratech.pond_ms.api.gradient.dto.GradientLightDTO gradientDto) throws ir.viratech.commons.api.search.InvalidDtoException {
			return this.getEntityByDtoFinder_Gradient().findByDto(gradientDto);
		}
		
		/**
		 * creates a DtoFieldInfo for dto-property "gradient".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param fieldInfoContext the FieldInfoContext of the dto-property: gradient
		 * @param entityByDtoFinder the EntityByDtoFinder for the dto-property: gradient
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.DtoFieldInfo<ir.viratech.pond_ms.model.gradient.Gradient, ir.viratech.pond_ms.api.gradient.dto.GradientLightDTO> createFieldInfo_Gradient(
				String externalName, String internalName, String internalSearchExpression, String bundleKey, boolean searchable, 
				ir.viratech.commons.api.search.field.FieldInfoContext<ir.viratech.pond_ms.api.gradient.dto.GradientLightDTO> fieldInfoContext, 
				ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.gradient.Gradient, ir.viratech.pond_ms.api.gradient.dto.GradientLightDTO> entityByDtoFinder) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Dto<ir.viratech.pond_ms.model.gradient.Gradient, ir.viratech.pond_ms.api.gradient.dto.GradientLightDTO>(
						externalName, internalName, internalSearchExpression, bundleKey, searchable, fieldInfoContext, entityByDtoFinder);
		}
		
		
		/**
		 * Creates an EntityByDtoFinder for the DTO property "parentLayer".
		 * The created object finds entities of type "ir.viratech.pond_ms.model.layer.ParentLayer" 
		 * by DTO's of type "ir.viratech.pond_ms.api.layer.dto.LayerLightDTO".
		 * @return the created EntityByDtoFinder
		 */
		protected abstract ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.ParentLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> createEntityByDtoFinder_ParentLayer();
		
		private ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.ParentLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> entityByDtoFinder_ParentLayer;
		
		/**
		 * Getter for the previously created EntityByDtoFinder for property "parentLayer".
		 * @return the previously created EntityByDtoFinder object 
		 */
		public final ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.ParentLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> getEntityByDtoFinder_ParentLayer() {
			return this.entityByDtoFinder_ParentLayer;
		}
		
		/**
		 * Finds entities of type "ir.viratech.pond_ms.model.layer.ParentLayer" 
		 * by DTO's of type "ir.viratech.pond_ms.api.layer.dto.LayerLightDTO".
		 * It is targeted for the DTO property: parentLayer
		 * @param parentLayerDto 
		 *		the given dto by which the entity should be found
		 * @return the found entity
		 * @throws ir.viratech.commons.api.search.InvalidDtoException
		 * 		If the given dto is not valid or is not representing an internal entity
		 */
		public final ir.viratech.pond_ms.model.layer.ParentLayer findByDto_ParentLayer(ir.viratech.pond_ms.api.layer.dto.LayerLightDTO parentLayerDto) throws ir.viratech.commons.api.search.InvalidDtoException {
			return this.getEntityByDtoFinder_ParentLayer().findByDto(parentLayerDto);
		}
		
		/**
		 * creates a DtoFieldInfo for dto-property "parentLayer".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param fieldInfoContext the FieldInfoContext of the dto-property: parentLayer
		 * @param entityByDtoFinder the EntityByDtoFinder for the dto-property: parentLayer
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.DtoFieldInfo<ir.viratech.pond_ms.model.layer.ParentLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> createFieldInfo_ParentLayer(
				String externalName, String internalName, String internalSearchExpression, String bundleKey, boolean searchable, 
				ir.viratech.commons.api.search.field.FieldInfoContext<ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> fieldInfoContext, 
				ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.ParentLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> entityByDtoFinder) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Dto<ir.viratech.pond_ms.model.layer.ParentLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO>(
						externalName, internalName, internalSearchExpression, bundleKey, searchable, fieldInfoContext, entityByDtoFinder);
		}
		
		
		/**
		 * Creates an EntityByDtoFinder for the DTO property "map".
		 * The created object finds entities of type "ir.viratech.pond_ms.model.gismap.GISMap" 
		 * by DTO's of type "ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO".
		 * @return the created EntityByDtoFinder
		 */
		protected abstract ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.gismap.GISMap, ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO> createEntityByDtoFinder_Map();
		
		private ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.gismap.GISMap, ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO> entityByDtoFinder_Map;
		
		/**
		 * Getter for the previously created EntityByDtoFinder for property "map".
		 * @return the previously created EntityByDtoFinder object 
		 */
		public final ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.gismap.GISMap, ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO> getEntityByDtoFinder_Map() {
			return this.entityByDtoFinder_Map;
		}
		
		/**
		 * Finds entities of type "ir.viratech.pond_ms.model.gismap.GISMap" 
		 * by DTO's of type "ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO".
		 * It is targeted for the DTO property: map
		 * @param mapDto 
		 *		the given dto by which the entity should be found
		 * @return the found entity
		 * @throws ir.viratech.commons.api.search.InvalidDtoException
		 * 		If the given dto is not valid or is not representing an internal entity
		 */
		public final ir.viratech.pond_ms.model.gismap.GISMap findByDto_Map(ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO mapDto) throws ir.viratech.commons.api.search.InvalidDtoException {
			return this.getEntityByDtoFinder_Map().findByDto(mapDto);
		}
		
		/**
		 * creates a DtoFieldInfo for dto-property "map".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param fieldInfoContext the FieldInfoContext of the dto-property: map
		 * @param entityByDtoFinder the EntityByDtoFinder for the dto-property: map
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.DtoFieldInfo<ir.viratech.pond_ms.model.gismap.GISMap, ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO> createFieldInfo_Map(
				String externalName, String internalName, String internalSearchExpression, String bundleKey, boolean searchable, 
				ir.viratech.commons.api.search.field.FieldInfoContext<ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO> fieldInfoContext, 
				ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.gismap.GISMap, ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO> entityByDtoFinder) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Dto<ir.viratech.pond_ms.model.gismap.GISMap, ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO>(
						externalName, internalName, internalSearchExpression, bundleKey, searchable, fieldInfoContext, entityByDtoFinder);
		}
		
		
		/**
		 * Creates an EntityByDtoFinder for the DTO property "pond".
		 * The created object finds entities of type "ir.viratech.pond_ms.model.layer.Pond" 
		 * by DTO's of type "ir.viratech.pond_ms.api.layer.dto.PondLightDTO".
		 * @return the created EntityByDtoFinder
		 */
		protected abstract ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.Pond, ir.viratech.pond_ms.api.layer.dto.PondLightDTO> createEntityByDtoFinder_Pond();
		
		private ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.Pond, ir.viratech.pond_ms.api.layer.dto.PondLightDTO> entityByDtoFinder_Pond;
		
		/**
		 * Getter for the previously created EntityByDtoFinder for property "pond".
		 * @return the previously created EntityByDtoFinder object 
		 */
		public final ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.Pond, ir.viratech.pond_ms.api.layer.dto.PondLightDTO> getEntityByDtoFinder_Pond() {
			return this.entityByDtoFinder_Pond;
		}
		
		/**
		 * Finds entities of type "ir.viratech.pond_ms.model.layer.Pond" 
		 * by DTO's of type "ir.viratech.pond_ms.api.layer.dto.PondLightDTO".
		 * It is targeted for the DTO property: pond
		 * @param pondDto 
		 *		the given dto by which the entity should be found
		 * @return the found entity
		 * @throws ir.viratech.commons.api.search.InvalidDtoException
		 * 		If the given dto is not valid or is not representing an internal entity
		 */
		public final ir.viratech.pond_ms.model.layer.Pond findByDto_Pond(ir.viratech.pond_ms.api.layer.dto.PondLightDTO pondDto) throws ir.viratech.commons.api.search.InvalidDtoException {
			return this.getEntityByDtoFinder_Pond().findByDto(pondDto);
		}
		
		/**
		 * creates a DtoFieldInfo for dto-property "pond".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param fieldInfoContext the FieldInfoContext of the dto-property: pond
		 * @param entityByDtoFinder the EntityByDtoFinder for the dto-property: pond
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.DtoFieldInfo<ir.viratech.pond_ms.model.layer.Pond, ir.viratech.pond_ms.api.layer.dto.PondLightDTO> createFieldInfo_Pond(
				String externalName, String internalName, String internalSearchExpression, String bundleKey, boolean searchable, 
				ir.viratech.commons.api.search.field.FieldInfoContext<ir.viratech.pond_ms.api.layer.dto.PondLightDTO> fieldInfoContext, 
				ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.Pond, ir.viratech.pond_ms.api.layer.dto.PondLightDTO> entityByDtoFinder) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Dto<ir.viratech.pond_ms.model.layer.Pond, ir.viratech.pond_ms.api.layer.dto.PondLightDTO>(
						externalName, internalName, internalSearchExpression, bundleKey, searchable, fieldInfoContext, entityByDtoFinder);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "subLayers".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_SubLayers(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		// =========== END createFieldInfo methods ===========
		
		/**
		 * The default constructor for BaseFieldInfoContext.
		 */
		protected BaseFieldInfoContext() {
			this.putFieldInfo(this.createFieldInfo_Uid("uid", "extuid", "extuid", null, "uid", true, false));
			this.putFieldInfo(this.createFieldInfo_Name("name", "name", "name", null, "name", true, null));
			this.putFieldInfo(this.createFieldInfo_Description("description", "description", "description", null, "description", true, null));
			this.putFieldInfo(this.createFieldInfo_CreationDate("creationDate", "creationDate", "creationDate", null, "creationDate", true, true));
			this.putFieldInfo(this.createFieldInfo_Type("type", "type", "type", null, "type", true, null));
			this.putFieldInfo(this.createFieldInfo_ChildCount("childCount", "childCount", "childCount", null, "childCount", true, null));
			this.putFieldInfo(this.createFieldInfo_FormSchemaKey("formSchemaKey", "formSchemaKey", "formSchemaKey", null, "formSchemaKey", true, false));
			this.putFieldInfo(this.createFieldInfo_VectorObjectsType("vectorObjectsType", "vectorObjectsType", "vectorObjectsType", null, "vectorObjectsType", true, false));
			this.putFieldInfo(this.createFieldInfo_Secret("secret", "secret", "secret", null, "secret", true, false));
			this.putFieldInfo(this.createFieldInfo_IsPond("isPond", "pondRelated", "pondRelated", null, "isPond", true, false));
			this.putFieldInfo(this.createFieldInfo_Icon("icon", "icon", "icon", null, "icon", true, null));
			this.putFieldInfo(this.createFieldInfo_Color("color", "color", "color", null, "color", true, null));
			this.putFieldInfo(this.createFieldInfo_Width("width", "width", "width", null, "width", true, null));
			this.putFieldInfo(this.createFieldInfo_Fill("fill", "fill", "fill", null, "fill", true, null));
			this.putFieldInfo(this.createFieldInfo_IsLabeled("isLabeled", "isLabeled", "isLabeled", null, "isLabeled", true, null));
			this.entityByDtoFinder_Gradient = createEntityByDtoFinder_Gradient();
			this.putFieldInfo(this.createFieldInfo_Gradient("gradient", "gradient", "gradient", "gradient", true, 
					getFieldInfoContextInstance(ir.viratech.pond_ms.api.gradient.dto.GradientLightDTO.FieldInfoContext.class), this.getEntityByDtoFinder_Gradient()));
			this.entityByDtoFinder_ParentLayer = createEntityByDtoFinder_ParentLayer();
			this.putFieldInfo(this.createFieldInfo_ParentLayer("parentLayer", "parentLayer", "parentLayer", "parentLayer", true, 
					getFieldInfoContextInstance(ir.viratech.pond_ms.api.layer.dto.LayerLightDTO.FieldInfoContext.class), this.getEntityByDtoFinder_ParentLayer()));
			this.entityByDtoFinder_Map = createEntityByDtoFinder_Map();
			this.putFieldInfo(this.createFieldInfo_Map("map", "map", "map", "map", true, 
					getFieldInfoContextInstance(ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO.FieldInfoContext.class), this.getEntityByDtoFinder_Map()));
			this.entityByDtoFinder_Pond = createEntityByDtoFinder_Pond();
			this.putFieldInfo(this.createFieldInfo_Pond("pond", "pond", "pond", "pond", true, 
					getFieldInfoContextInstance(ir.viratech.pond_ms.api.layer.dto.PondLightDTO.FieldInfoContext.class), this.getEntityByDtoFinder_Pond()));
			this.putFieldInfo(this.createFieldInfo_SubLayers("subLayers", "subLayers", "subLayers", "collection", "subLayers", true, null));
		}
		
		/**
		 * Creates a DTO of type "LayerFullDTO".
		 *
		 * @return the created DTO
		 */
		@Override
		public LayerFullDTO createDto() {
			return new LayerFullDTO();
		}
		
	}
	
	/**
	 * Provides the corresponding FieldInfoContext of this DTO.
	 *
	 * @return the corresponding FieldInfoContext object
	 */
	public LayerFullDTO.FieldInfoContext getFieldInfoContext() {
		return getFieldInfoContextInstance(LayerFullDTO.FieldInfoContext.class);
	}
	
	
	
	
	////////////////////
	// DTO Properties //
	////////////////////
	
	// uid
	
	private String uid;
	
	/**
	 * Getter for property "uid".
	 *
	 * @return the value of property "uid"
	 */
	@JsonProperty
	public String getUid() {
		return this.uid;
	}
	
	
	// name
	
	private String name;
	
	/**
	 * Getter for property "name".
	 *
	 * @return the value of property "name"
	 */
	@JsonProperty
	public String getName() {
		return this.name;
	}
	
	/**
	 * Setter for property "name".
	 *
	 * @param name the new value for property "name"
	 */
	public void setName(String name) {
		this.name = name;
	}
	
	/**
	/**
	 * Used for saving a given value of property name to a given internal entity.
	 * 
	 * @param layer
	 * 		the given internal entity
	 * @param name 
	 * 		the value of property name which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property name is not appropriate for saving the entity
	 */
	protected void save_Name(Layer layer, String name)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException {
		layer.setName((String) name);
	}
	
	
	// description
	
	private String description;
	
	/**
	 * Getter for property "description".
	 *
	 * @return the value of property "description"
	 */
	@JsonProperty
	public String getDescription() {
		return this.description;
	}
	
	/**
	 * Setter for property "description".
	 *
	 * @param description the new value for property "description"
	 */
	public void setDescription(String description) {
		this.description = description;
	}
	
	
	// creationDate
	
	private java.util.Date creationDate;
	
	/**
	 * Getter for property "creationDate".
	 *
	 * @return the value of property "creationDate"
	 */
	@JsonProperty
	public java.util.Date getCreationDate() {
		return this.creationDate;
	}
	
	
	// type
	
	private String type;
	
	/**
	 * Getter for property "type".
	 *
	 * @return the value of property "type"
	 */
	@JsonProperty
	public String getType() {
		return this.type;
	}
	
	/**
	 * Used for loading the property type from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property type based on the given internal entity
	 */
	protected abstract String load_Type(Layer layer);
	
	
	// childCount
	
	private java.lang.Integer childCount;
	
	/**
	 * Getter for property "childCount".
	 *
	 * @return the value of property "childCount"
	 */
	@JsonProperty
	public java.lang.Integer getChildCount() {
		return this.childCount;
	}
	
	/**
	 * Used for loading the property childCount from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property childCount based on the given internal entity
	 */
	protected abstract java.lang.Integer load_ChildCount(Layer layer);
	
	
	// formSchemaKey
	
	private String formSchemaKey;
	
	/**
	 * Getter for property "formSchemaKey".
	 *
	 * @return the value of property "formSchemaKey"
	 */
	@JsonProperty
	public String getFormSchemaKey() {
		return this.formSchemaKey;
	}
	
	/**
	 * Used for loading the property formSchemaKey from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property formSchemaKey based on the given internal entity
	 */
	protected abstract String load_FormSchemaKey(Layer layer);
	
	
	// vectorObjectsType
	
	private String vectorObjectsType;
	
	/**
	 * Getter for property "vectorObjectsType".
	 *
	 * @return the value of property "vectorObjectsType"
	 */
	@JsonProperty
	public String getVectorObjectsType() {
		return this.vectorObjectsType;
	}
	
	/**
	 * Used for loading the property vectorObjectsType from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property vectorObjectsType based on the given internal entity
	 */
	protected abstract String load_VectorObjectsType(Layer layer);
	
	
	// secret
	
	private java.lang.Boolean secret;
	
	/**
	 * Getter for property "secret".
	 *
	 * @return the value of property "secret"
	 */
	@JsonProperty
	public java.lang.Boolean isSecret() {
		return this.secret;
	}
	
	/**
	 * Used for loading the property secret from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property secret based on the given internal entity
	 */
	protected abstract java.lang.Boolean load_Secret(Layer layer);
	
	
	// isPond
	
	private java.lang.Boolean isPond;
	
	/**
	 * Getter for property "isPond".
	 *
	 * @return the value of property "isPond"
	 */
	@JsonProperty
	public java.lang.Boolean isIsPond() {
		return this.isPond;
	}
	
	/**
	 * Used for loading the property isPond from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property isPond based on the given internal entity
	 */
	protected abstract java.lang.Boolean load_IsPond(Layer layer);
	
	
	// icon
	
	private String icon;
	
	/**
	 * Getter for property "icon".
	 *
	 * @return the value of property "icon"
	 */
	@JsonProperty
	public String getIcon() {
		return this.icon;
	}
	
	/**
	 * Used for loading the property icon from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property icon based on the given internal entity
	 */
	protected abstract String load_Icon(Layer layer);
	
	
	// color
	
	private String color;
	
	/**
	 * Getter for property "color".
	 *
	 * @return the value of property "color"
	 */
	@JsonProperty
	public String getColor() {
		return this.color;
	}
	
	/**
	 * Used for loading the property color from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property color based on the given internal entity
	 */
	protected abstract String load_Color(Layer layer);
	
	
	// width
	
	private String width;
	
	/**
	 * Getter for property "width".
	 *
	 * @return the value of property "width"
	 */
	@JsonProperty
	public String getWidth() {
		return this.width;
	}
	
	/**
	 * Used for loading the property width from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property width based on the given internal entity
	 */
	protected abstract String load_Width(Layer layer);
	
	
	// fill
	
	private String fill;
	
	/**
	 * Getter for property "fill".
	 *
	 * @return the value of property "fill"
	 */
	@JsonProperty
	public String getFill() {
		return this.fill;
	}
	
	/**
	 * Used for loading the property fill from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property fill based on the given internal entity
	 */
	protected abstract String load_Fill(Layer layer);
	
	
	// isLabeled
	
	private java.lang.Boolean isLabeled;
	
	/**
	 * Getter for property "isLabeled".
	 *
	 * @return the value of property "isLabeled"
	 */
	@JsonProperty
	public java.lang.Boolean isIsLabeled() {
		return this.isLabeled;
	}
	
	/**
	 * Used for loading the property isLabeled from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property isLabeled based on the given internal entity
	 */
	protected abstract java.lang.Boolean load_IsLabeled(Layer layer);
	
	
	// gradient
	
	private ir.viratech.pond_ms.api.gradient.dto.GradientLightDTO gradient;
	private boolean __modified__Gradient = false;
	
	/**
	 * Getter for property "gradient".
	 *
	 * @return the value of property "gradient"
	 */
	@JsonProperty
	public ir.viratech.pond_ms.api.gradient.dto.GradientLightDTO getGradient() {
		return this.gradient;
	}
	
	/**
	 * Shows the modification state of the property "gradient".
	 * 
	 * @return true if the property is modified
	 */
	public boolean hasModifiedGradient() {
		return this.__modified__Gradient;
	}
	
	/**
	 * Used for loading the property gradient from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property gradient based on the given internal entity
	 */
	protected abstract ir.viratech.pond_ms.api.gradient.dto.GradientLightDTO load_Gradient(Layer layer);
	
	
	// parentLayer
	
	private ir.viratech.pond_ms.api.layer.dto.LayerLightDTO parentLayer;
	private boolean __modified__ParentLayer = false;
	
	/**
	 * Getter for property "parentLayer".
	 *
	 * @return the value of property "parentLayer"
	 */
	@JsonProperty
	public ir.viratech.pond_ms.api.layer.dto.LayerLightDTO getParentLayer() {
		return this.parentLayer;
	}
	
	/**
	 * Setter for property "parentLayer".
	 *
	 * @param parentLayer the new value for property "parentLayer"
	 */
	public void setParentLayer(ir.viratech.pond_ms.api.layer.dto.LayerLightDTO parentLayer) {
		this.__modified__ParentLayer = true;
		this.parentLayer = parentLayer;
	}
	
	/**
	 * Shows the modification state of the property "parentLayer".
	 * 
	 * @return true if the property is modified
	 */
	public boolean hasModifiedParentLayer() {
		return this.__modified__ParentLayer;
	}
	
	/**
	 * Used for loading the property parentLayer from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property parentLayer based on the given internal entity
	 */
	protected ir.viratech.pond_ms.api.layer.dto.LayerLightDTO load_ParentLayer(Layer layer) {
		ir.viratech.pond_ms.model.layer.ParentLayer __internalProperty_parentLayer = layer.getParentLayer();
		if (__internalProperty_parentLayer == null)
			return null; 
		ir.viratech.pond_ms.api.layer.dto.LayerLightDTO parentLayer = new ir.viratech.pond_ms.api.layer.dto.LayerLightDTO();
		parentLayer.loadFrom(__internalProperty_parentLayer);
		return parentLayer;
	}
	
	/**
	/**
	 * Used for saving a given value of property parentLayer to a given internal entity.
	 * 
	 * @param layer
	 * 		the given internal entity
	 * @param parentLayerDto 
	 * 		the value of property parentLayer which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property parentLayer is not appropriate for saving the entity
	 */
	protected void save_ParentLayer(Layer layer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO parentLayerDto)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException {
		ir.viratech.pond_ms.model.layer.ParentLayer __internalProperty_parentLayer = null;
		if (parentLayerDto != null) {
			try {
				__internalProperty_parentLayer = findByDto_ParentLayer(parentLayerDto);
			} catch (ir.viratech.commons.api.search.InvalidDtoException e) {
				throw new ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException("The given dto is invalid: "+parentLayerDto, e);
			}
			if (__internalProperty_parentLayer == null)
				throw new ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException("No entity was found for the given dto: "+parentLayerDto);
		}
		layer.setParentLayer(__internalProperty_parentLayer);
	}
	
	/**
	 * Finds entities based on the DTO property "parentLayer".
	 * It finds entities of type "ir.viratech.pond_ms.model.layer.ParentLayer" 
	 * based on DTO's of type "ir.viratech.pond_ms.api.layer.dto.LayerLightDTO",
	 * targeted on the DTO property "parentLayer".
	 * 
	 * @param parentLayerDto 
	 *		the given dto by which the entity should be found
	 * @return the found entity
	 * @throws ir.viratech.commons.api.search.InvalidDtoException
	 * 		If the given dto is not valid or is not representing an internal entity  
	 */
	protected ir.viratech.pond_ms.model.layer.ParentLayer findByDto_ParentLayer(ir.viratech.pond_ms.api.layer.dto.LayerLightDTO parentLayerDto) throws ir.viratech.commons.api.search.InvalidDtoException {
		return this.getFieldInfoContext().findByDto_ParentLayer(parentLayerDto);
	}
	
	
	// map
	
	private ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO map;
	private boolean __modified__Map = false;
	
	/**
	 * Getter for property "map".
	 *
	 * @return the value of property "map"
	 */
	@JsonProperty
	public ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO getMap() {
		return this.map;
	}
	
	/**
	 * Setter for property "map".
	 *
	 * @param map the new value for property "map"
	 */
	public void setMap(ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO map) {
		this.__modified__Map = true;
		this.map = map;
	}
	
	/**
	 * Shows the modification state of the property "map".
	 * 
	 * @return true if the property is modified
	 */
	public boolean hasModifiedMap() {
		return this.__modified__Map;
	}
	
	/**
	 * Used for loading the property map from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property map based on the given internal entity
	 */
	protected ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO load_Map(Layer layer) {
		ir.viratech.pond_ms.model.gismap.GISMap __internalProperty_map = layer.getMap();
		if (__internalProperty_map == null)
			return null; 
		ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO map = new ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO();
		map.loadFrom(__internalProperty_map);
		return map;
	}
	
	/**
	/**
	 * Used for saving a given value of property map to a given internal entity.
	 * 
	 * @param layer
	 * 		the given internal entity
	 * @param mapDto 
	 * 		the value of property map which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property map is not appropriate for saving the entity
	 */
	protected void save_Map(Layer layer, ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO mapDto)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException {
		if (mapDto == null)
			throw new ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException("The given dto must not be null.");
		ir.viratech.pond_ms.model.gismap.GISMap __internalProperty_map = null;
		try {
			__internalProperty_map = findByDto_Map(mapDto);
		} catch (ir.viratech.commons.api.search.InvalidDtoException e) {
			throw new ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException("The given dto is invalid: "+mapDto, e);
		}
		if (__internalProperty_map == null)
			throw new ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException("No entity was found for the given dto: "+mapDto);
		layer.setMap(__internalProperty_map);
	}
	
	/**
	 * Finds entities based on the DTO property "map".
	 * It finds entities of type "ir.viratech.pond_ms.model.gismap.GISMap" 
	 * based on DTO's of type "ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO",
	 * targeted on the DTO property "map".
	 * 
	 * @param mapDto 
	 *		the given dto by which the entity should be found
	 * @return the found entity
	 * @throws ir.viratech.commons.api.search.InvalidDtoException
	 * 		If the given dto is not valid or is not representing an internal entity  
	 */
	protected ir.viratech.pond_ms.model.gismap.GISMap findByDto_Map(ir.viratech.pond_ms.api.gismap.dto.GISMapLightDTO mapDto) throws ir.viratech.commons.api.search.InvalidDtoException {
		return this.getFieldInfoContext().findByDto_Map(mapDto);
	}
	
	
	// pond
	
	private ir.viratech.pond_ms.api.layer.dto.PondLightDTO pond;
	private boolean __modified__Pond = false;
	
	/**
	 * Getter for property "pond".
	 *
	 * @return the value of property "pond"
	 */
	@JsonProperty
	public ir.viratech.pond_ms.api.layer.dto.PondLightDTO getPond() {
		return this.pond;
	}
	
	/**
	 * Shows the modification state of the property "pond".
	 * 
	 * @return true if the property is modified
	 */
	public boolean hasModifiedPond() {
		return this.__modified__Pond;
	}
	
	/**
	 * Used for loading the property pond from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property pond based on the given internal entity
	 */
	protected abstract ir.viratech.pond_ms.api.layer.dto.PondLightDTO load_Pond(Layer layer);
	
	
	// subLayers
	
	private ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.layer.Layer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> subLayers;
	
	/**
	 * Getter for property "subLayers".
	 *
	 * @return the value of property "subLayers"
	 */
	@JsonProperty
	public ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.layer.Layer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> getSubLayers() {
		return this.subLayers;
	}
	
	/**
	 * Setter for property "subLayers".
	 *
	 * @param subLayers the new value for property "subLayers"
	 */
	public void setSubLayers(ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.layer.Layer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> subLayers) {
		this.subLayers = subLayers;
	}
	
	/**
	 * Used for loading the property subLayers from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property subLayers based on the given internal entity
	 */
	protected abstract ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.layer.Layer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> load_SubLayers(Layer layer);
	
	
	
	/////////////////////////
	// save/load functions //
	/////////////////////////
	
	/**
	 * Loads this DTO from an entity object of type "Layer".
	 * 
	 * @param layer the entity object from which this DTO is loaded. 
	 */
	@Override
	public void loadFrom(Layer layer) {
		this.uid = layer.getExtuid();
		this.name = layer.getName();
		this.description = layer.getDescription();
		this.creationDate = layer.getCreationDate();
		this.type = this.load_Type(layer);
		this.childCount = this.load_ChildCount(layer);
		this.formSchemaKey = this.load_FormSchemaKey(layer);
		this.vectorObjectsType = this.load_VectorObjectsType(layer);
		this.secret = this.load_Secret(layer);
		this.isPond = this.load_IsPond(layer);
		this.icon = this.load_Icon(layer);
		this.color = this.load_Color(layer);
		this.width = this.load_Width(layer);
		this.fill = this.load_Fill(layer);
		this.isLabeled = this.load_IsLabeled(layer);
		this.gradient = this.load_Gradient(layer);
		this.parentLayer = this.load_ParentLayer(layer);
		this.map = this.load_Map(layer);
		this.pond = this.load_Pond(layer);
		this.subLayers = this.load_SubLayers(layer);
	}
	
	/**
	 * Saves this DTO to an entity object of type "Layer".
	 * 
	 * @param layer the entity object to which this DTO is saved. 
	 * @throws BadDtoEntityModificationException If this DTO is not valid for saving. 
	 */
	@Override
	public void saveTo(Layer layer) throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException {
		//Disabled save for property: uid
		this.save_Name(layer, this.name);
		layer.setDescription(this.description);
		//Disabled save for property: creationDate
		//Disabled save for property: type
		//Disabled save for property: childCount
		//Disabled save for property: formSchemaKey
		//Disabled save for property: vectorObjectsType
		//Disabled save for property: secret
		//Disabled save for property: isPond
		//Disabled save for property: icon
		//Disabled save for property: color
		//Disabled save for property: width
		//Disabled save for property: fill
		//Disabled save for property: isLabeled
		//Disabled save for property: gradient
		if (this.hasModifiedParentLayer()) {
			this.save_ParentLayer(layer, this.parentLayer);
		}
		if (this.hasModifiedMap()) {
			this.save_Map(layer, this.map);
		}
		//Disabled save for property: pond
		//Disabled save for property: subLayers
	}
	
	
	
	//////////////
	// toString //
	//////////////
	
	@Override
	protected Map<String, Object> toStringData() {
		Map<String, Object> data = super.toStringData();
		data.put("uid", this.uid);
		data.put("name", this.name);
		data.put("description", this.description);
		data.put("creationDate", this.creationDate);
		data.put("type", this.type);
		data.put("childCount", this.childCount);
		data.put("formSchemaKey", this.formSchemaKey);
		data.put("vectorObjectsType", this.vectorObjectsType);
		data.put("secret", this.secret);
		data.put("isPond", this.isPond);
		data.put("icon", this.icon);
		data.put("color", this.color);
		data.put("width", this.width);
		data.put("fill", this.fill);
		data.put("isLabeled", this.isLabeled);
		data.put("gradient", this.gradient);
		data.put("parentLayer", this.parentLayer);
		data.put("map", this.map);
		data.put("pond", this.pond);
		data.put("subLayers", this.subLayers);
		return data;
	}
	
}
