package ir.viratech.pond_ms.api.layer.base;

import static ir.viratech.commons.api.field_info.FieldInfoContextProvider.getFieldInfoContextInstance;
import ir.viratech.pond_ms.api.layer.dto.LayerExpandedDTO;
import ir.viratech.pond_ms.model.layer.Layer;

import java.util.Map;

import com.fasterxml.jackson.annotation.JsonProperty;


/**
 * A base DTO for class "Layer".
 * Do not edit this file.
 * It is an automatically generated class.
 *
 */
public abstract class BaseLayerExpandedDTO extends ir.viratech.commons.api.dto.AbstractFullDTO<Layer> {
	
	
	/**
	 * 
	 * Base FieldInfoContext for "LayerExpandedDTO".
	 *
	 */
	public static abstract class BaseFieldInfoContext extends ir.viratech.commons.api.search.field.AbstractFieldInfoContext<LayerExpandedDTO> {
		
		
		// =========== BEGIN createFieldInfo methods ===========
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "uid".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Uid(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "name".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Name(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "type".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Type(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "formSchemaKey".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_FormSchemaKey(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "vectorObjectsType".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_VectorObjectsType(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * Creates an EntityByDtoFinder for the DTO property "parentLayer".
		 * The created object finds entities of type "ir.viratech.pond_ms.model.layer.ParentLayer" 
		 * by DTO's of type "ir.viratech.pond_ms.api.layer.dto.LayerLightDTO".
		 * @return the created EntityByDtoFinder
		 */
		protected abstract ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.ParentLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> createEntityByDtoFinder_ParentLayer();
		
		private ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.ParentLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> entityByDtoFinder_ParentLayer;
		
		/**
		 * Getter for the previously created EntityByDtoFinder for property "parentLayer".
		 * @return the previously created EntityByDtoFinder object 
		 */
		public final ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.ParentLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> getEntityByDtoFinder_ParentLayer() {
			return this.entityByDtoFinder_ParentLayer;
		}
		
		/**
		 * Finds entities of type "ir.viratech.pond_ms.model.layer.ParentLayer" 
		 * by DTO's of type "ir.viratech.pond_ms.api.layer.dto.LayerLightDTO".
		 * It is targeted for the DTO property: parentLayer
		 * @param parentLayerDto 
		 *		the given dto by which the entity should be found
		 * @return the found entity
		 * @throws ir.viratech.commons.api.search.InvalidDtoException
		 * 		If the given dto is not valid or is not representing an internal entity
		 */
		public final ir.viratech.pond_ms.model.layer.ParentLayer findByDto_ParentLayer(ir.viratech.pond_ms.api.layer.dto.LayerLightDTO parentLayerDto) throws ir.viratech.commons.api.search.InvalidDtoException {
			return this.getEntityByDtoFinder_ParentLayer().findByDto(parentLayerDto);
		}
		
		/**
		 * creates a DtoFieldInfo for dto-property "parentLayer".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param fieldInfoContext the FieldInfoContext of the dto-property: parentLayer
		 * @param entityByDtoFinder the EntityByDtoFinder for the dto-property: parentLayer
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.DtoFieldInfo<ir.viratech.pond_ms.model.layer.ParentLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> createFieldInfo_ParentLayer(
				String externalName, String internalName, String internalSearchExpression, String bundleKey, boolean searchable, 
				ir.viratech.commons.api.search.field.FieldInfoContext<ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> fieldInfoContext, 
				ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.ParentLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> entityByDtoFinder) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Dto<ir.viratech.pond_ms.model.layer.ParentLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO>(
						externalName, internalName, internalSearchExpression, bundleKey, searchable, fieldInfoContext, entityByDtoFinder);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "subLayers".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_SubLayers(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "vectorObjects".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_VectorObjects(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		// =========== END createFieldInfo methods ===========
		
		/**
		 * The default constructor for BaseFieldInfoContext.
		 */
		protected BaseFieldInfoContext() {
			this.putFieldInfo(this.createFieldInfo_Uid("uid", "extuid", "extuid", null, "uid", true, false));
			this.putFieldInfo(this.createFieldInfo_Name("name", "name", "name", null, "name", true, null));
			this.putFieldInfo(this.createFieldInfo_Type("type", "type", "type", null, "type", true, null));
			this.putFieldInfo(this.createFieldInfo_FormSchemaKey("formSchemaKey", "formSchemaKey", "formSchemaKey", null, "formSchemaKey", true, false));
			this.putFieldInfo(this.createFieldInfo_VectorObjectsType("vectorObjectsType", "vectorObjectsType", "vectorObjectsType", null, "vectorObjectsType", true, false));
			this.entityByDtoFinder_ParentLayer = createEntityByDtoFinder_ParentLayer();
			this.putFieldInfo(this.createFieldInfo_ParentLayer("parentLayer", "parentLayer", "parentLayer", "parentLayer", true, 
					getFieldInfoContextInstance(ir.viratech.pond_ms.api.layer.dto.LayerLightDTO.FieldInfoContext.class), this.getEntityByDtoFinder_ParentLayer()));
			this.putFieldInfo(this.createFieldInfo_SubLayers("subLayers", "subLayers", "subLayers", "collection", "subLayers", true, null));
			this.putFieldInfo(this.createFieldInfo_VectorObjects("vectorObjects", "vectorObjects", "vectorObjects", "collection", "vectorObjects", true, null));
		}
		
		/**
		 * Creates a DTO of type "LayerExpandedDTO".
		 *
		 * @return the created DTO
		 */
		@Override
		public LayerExpandedDTO createDto() {
			return new LayerExpandedDTO();
		}
		
	}
	
	/**
	 * Provides the corresponding FieldInfoContext of this DTO.
	 *
	 * @return the corresponding FieldInfoContext object
	 */
	public LayerExpandedDTO.FieldInfoContext getFieldInfoContext() {
		return getFieldInfoContextInstance(LayerExpandedDTO.FieldInfoContext.class);
	}
	
	
	
	
	////////////////////
	// DTO Properties //
	////////////////////
	
	// uid
	
	private String uid;
	
	/**
	 * Getter for property "uid".
	 *
	 * @return the value of property "uid"
	 */
	@JsonProperty
	public String getUid() {
		return this.uid;
	}
	
	
	// name
	
	private String name;
	
	/**
	 * Getter for property "name".
	 *
	 * @return the value of property "name"
	 */
	@JsonProperty
	public String getName() {
		return this.name;
	}
	
	/**
	 * Setter for property "name".
	 *
	 * @param name the new value for property "name"
	 */
	public void setName(String name) {
		this.name = name;
	}
	
	/**
	/**
	 * Used for saving a given value of property name to a given internal entity.
	 * 
	 * @param layer
	 * 		the given internal entity
	 * @param name 
	 * 		the value of property name which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property name is not appropriate for saving the entity
	 */
	protected void save_Name(Layer layer, String name)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException {
		layer.setName((String) name);
	}
	
	
	// type
	
	private String type;
	
	/**
	 * Getter for property "type".
	 *
	 * @return the value of property "type"
	 */
	@JsonProperty
	public String getType() {
		return this.type;
	}
	
	
	// formSchemaKey
	
	private String formSchemaKey;
	
	/**
	 * Getter for property "formSchemaKey".
	 *
	 * @return the value of property "formSchemaKey"
	 */
	@JsonProperty
	public String getFormSchemaKey() {
		return this.formSchemaKey;
	}
	
	/**
	 * Setter for property "formSchemaKey".
	 *
	 * @param formSchemaKey the new value for property "formSchemaKey"
	 */
	public void setFormSchemaKey(String formSchemaKey) {
		this.formSchemaKey = formSchemaKey;
	}
	
	/**
	 * Used for loading the property formSchemaKey from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property formSchemaKey based on the given internal entity
	 */
	protected abstract String load_FormSchemaKey(Layer layer);
	
	/**
	/**
	 * Used for saving a given value of property formSchemaKey to a given internal entity.
	 * 
	 * @param layer
	 * 		the given internal entity
	 * @param formSchemaKey 
	 * 		the value of property formSchemaKey which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property formSchemaKey is not appropriate for saving the entity
	 */
	protected abstract void save_FormSchemaKey(Layer layer, String formSchemaKey)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException;
	
	
	// vectorObjectsType
	
	private String vectorObjectsType;
	
	/**
	 * Getter for property "vectorObjectsType".
	 *
	 * @return the value of property "vectorObjectsType"
	 */
	@JsonProperty
	public String getVectorObjectsType() {
		return this.vectorObjectsType;
	}
	
	/**
	 * Setter for property "vectorObjectsType".
	 *
	 * @param vectorObjectsType the new value for property "vectorObjectsType"
	 */
	public void setVectorObjectsType(String vectorObjectsType) {
		this.vectorObjectsType = vectorObjectsType;
	}
	
	/**
	 * Used for loading the property vectorObjectsType from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property vectorObjectsType based on the given internal entity
	 */
	protected abstract String load_VectorObjectsType(Layer layer);
	
	/**
	/**
	 * Used for saving a given value of property vectorObjectsType to a given internal entity.
	 * 
	 * @param layer
	 * 		the given internal entity
	 * @param vectorObjectsType 
	 * 		the value of property vectorObjectsType which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property vectorObjectsType is not appropriate for saving the entity
	 */
	protected abstract void save_VectorObjectsType(Layer layer, String vectorObjectsType)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException;
	
	
	// parentLayer
	
	private ir.viratech.pond_ms.api.layer.dto.LayerLightDTO parentLayer;
	private boolean __modified__ParentLayer = false;
	
	/**
	 * Getter for property "parentLayer".
	 *
	 * @return the value of property "parentLayer"
	 */
	@JsonProperty
	public ir.viratech.pond_ms.api.layer.dto.LayerLightDTO getParentLayer() {
		return this.parentLayer;
	}
	
	/**
	 * Shows the modification state of the property "parentLayer".
	 * 
	 * @return true if the property is modified
	 */
	public boolean hasModifiedParentLayer() {
		return this.__modified__ParentLayer;
	}
	
	/**
	 * Used for loading the property parentLayer from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property parentLayer based on the given internal entity
	 */
	protected ir.viratech.pond_ms.api.layer.dto.LayerLightDTO load_ParentLayer(Layer layer) {
		ir.viratech.pond_ms.model.layer.ParentLayer __internalProperty_parentLayer = layer.getParentLayer();
		if (__internalProperty_parentLayer == null)
			return null; 
		ir.viratech.pond_ms.api.layer.dto.LayerLightDTO parentLayer = new ir.viratech.pond_ms.api.layer.dto.LayerLightDTO();
		parentLayer.loadFrom(__internalProperty_parentLayer);
		return parentLayer;
	}
	
	
	// subLayers
	
	private ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.layer.Layer, ir.viratech.pond_ms.api.layer.dto.LayerExpandedDTO> subLayers;
	
	/**
	 * Getter for property "subLayers".
	 *
	 * @return the value of property "subLayers"
	 */
	@JsonProperty
	public ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.layer.Layer, ir.viratech.pond_ms.api.layer.dto.LayerExpandedDTO> getSubLayers() {
		return this.subLayers;
	}
	
	/**
	 * Setter for property "subLayers".
	 *
	 * @param subLayers the new value for property "subLayers"
	 */
	public void setSubLayers(ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.layer.Layer, ir.viratech.pond_ms.api.layer.dto.LayerExpandedDTO> subLayers) {
		this.subLayers = subLayers;
	}
	
	/**
	 * Used for loading the property subLayers from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property subLayers based on the given internal entity
	 */
	protected abstract ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.layer.Layer, ir.viratech.pond_ms.api.layer.dto.LayerExpandedDTO> load_SubLayers(Layer layer);
	
	/**
	/**
	 * Used for saving a given value of property subLayers to a given internal entity.
	 * 
	 * @param layer
	 * 		the given internal entity
	 * @param subLayers 
	 * 		the value of property subLayers which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property subLayers is not appropriate for saving the entity
	 */
	protected abstract void save_SubLayers(Layer layer, ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.layer.Layer, ir.viratech.pond_ms.api.layer.dto.LayerExpandedDTO> subLayers)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException;
	
	
	// vectorObjects
	
	private ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.map_object.vector.GISVectorObject, ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectExpandedDTO> vectorObjects;
	
	/**
	 * Getter for property "vectorObjects".
	 *
	 * @return the value of property "vectorObjects"
	 */
	@JsonProperty
	public ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.map_object.vector.GISVectorObject, ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectExpandedDTO> getVectorObjects() {
		return this.vectorObjects;
	}
	
	/**
	 * Setter for property "vectorObjects".
	 *
	 * @param vectorObjects the new value for property "vectorObjects"
	 */
	public void setVectorObjects(ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.map_object.vector.GISVectorObject, ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectExpandedDTO> vectorObjects) {
		this.vectorObjects = vectorObjects;
	}
	
	/**
	 * Used for loading the property vectorObjects from a given internal entity.
	 * 
	 * @param layer the given internal entity
	 * @return the value of property vectorObjects based on the given internal entity
	 */
	protected abstract ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.map_object.vector.GISVectorObject, ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectExpandedDTO> load_VectorObjects(Layer layer);
	
	/**
	/**
	 * Used for saving a given value of property vectorObjects to a given internal entity.
	 * 
	 * @param layer
	 * 		the given internal entity
	 * @param vectorObjects 
	 * 		the value of property vectorObjects which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property vectorObjects is not appropriate for saving the entity
	 */
	protected abstract void save_VectorObjects(Layer layer, ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.map_object.vector.GISVectorObject, ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectExpandedDTO> vectorObjects)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException;
	
	
	
	/////////////////////////
	// save/load functions //
	/////////////////////////
	
	/**
	 * Loads this DTO from an entity object of type "Layer".
	 * 
	 * @param layer the entity object from which this DTO is loaded. 
	 */
	@Override
	public void loadFrom(Layer layer) {
		this.uid = layer.getExtuid();
		this.name = layer.getName();
		this.type = layer.getType();
		this.formSchemaKey = this.load_FormSchemaKey(layer);
		this.vectorObjectsType = this.load_VectorObjectsType(layer);
		this.parentLayer = this.load_ParentLayer(layer);
		this.subLayers = this.load_SubLayers(layer);
		this.vectorObjects = this.load_VectorObjects(layer);
	}
	
	/**
	 * Saves this DTO to an entity object of type "Layer".
	 * 
	 * @param layer the entity object to which this DTO is saved. 
	 * @throws BadDtoEntityModificationException If this DTO is not valid for saving. 
	 */
	@Override
	public void saveTo(Layer layer) throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException {
		//Disabled save for property: uid
		this.save_Name(layer, this.name);
		//Disabled save for property: type
		this.save_FormSchemaKey(layer, this.formSchemaKey);
		this.save_VectorObjectsType(layer, this.vectorObjectsType);
		//Disabled save for property: parentLayer
		this.save_SubLayers(layer, this.subLayers);
		this.save_VectorObjects(layer, this.vectorObjects);
	}
	
	
	
	//////////////
	// toString //
	//////////////
	
	@Override
	protected Map<String, Object> toStringData() {
		Map<String, Object> data = super.toStringData();
		data.put("uid", this.uid);
		data.put("name", this.name);
		data.put("type", this.type);
		data.put("formSchemaKey", this.formSchemaKey);
		data.put("vectorObjectsType", this.vectorObjectsType);
		data.put("parentLayer", this.parentLayer);
		data.put("subLayers", this.subLayers);
		data.put("vectorObjects", this.vectorObjects);
		return data;
	}
	
}
