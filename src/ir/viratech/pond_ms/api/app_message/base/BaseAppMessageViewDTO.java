package ir.viratech.pond_ms.api.app_message.base;

import ir.viratech.pond_ms.model.app_message.AppMessage;

import java.util.Map;

import com.fasterxml.jackson.annotation.JsonProperty;


/**
 * A base DTO for class "AppMessage".
 * Do not edit this file.
 * It is an automatically generated class.
 *
 */
public abstract class BaseAppMessageViewDTO extends ir.viratech.commons.api.dto.AbstractFullDTO<AppMessage> {
	
	
	
	
	
	
	////////////////////
	// DTO Properties //
	////////////////////
	
	// uid
	
	private String uid;
	
	/**
	 * Getter for property "uid".
	 *
	 * @return the value of property "uid"
	 */
	@JsonProperty
	public String getUid() {
		return this.uid;
	}
	
	
	// title
	
	private String title;
	
	/**
	 * Getter for property "title".
	 *
	 * @return the value of property "title"
	 */
	@JsonProperty
	public String getTitle() {
		return this.title;
	}
	
	
	// message
	
	private String message;
	
	/**
	 * Getter for property "message".
	 *
	 * @return the value of property "message"
	 */
	@JsonProperty
	public String getMessage() {
		return this.message;
	}
	
	
	// creationDate
	
	private java.util.Date creationDate;
	
	/**
	 * Getter for property "creationDate".
	 *
	 * @return the value of property "creationDate"
	 */
	@JsonProperty
	public java.util.Date getCreationDate() {
		return this.creationDate;
	}
	
	
	// images
	
	private java.util.Set<java.lang.String> images;
	
	/**
	 * Getter for property "images".
	 *
	 * @return the value of property "images"
	 */
	@JsonProperty
	public java.util.Set<java.lang.String> getImages() {
		return this.images;
	}
	
	/**
	 * Used for loading the property images from a given internal entity.
	 * 
	 * @param appMessage the given internal entity
	 * @return the value of property images based on the given internal entity
	 */
	protected abstract java.util.Set<java.lang.String> load_Images(AppMessage appMessage);
	
	
	// videoUrl
	
	private String videoUrl;
	
	/**
	 * Getter for property "videoUrl".
	 *
	 * @return the value of property "videoUrl"
	 */
	@JsonProperty
	public String getVideoUrl() {
		return this.videoUrl;
	}
	
	
	// videoOnly
	
	private boolean videoOnly;
	
	/**
	 * Getter for property "videoOnly".
	 *
	 * @return the value of property "videoOnly"
	 */
	@JsonProperty
	public boolean isVideoOnly() {
		return this.videoOnly;
	}
	
	
	// urls
	
	private java.util.List<java.lang.String> urls;
	
	/**
	 * Getter for property "urls".
	 *
	 * @return the value of property "urls"
	 */
	@JsonProperty
	public java.util.List<java.lang.String> getUrls() {
		return this.urls;
	}
	
	/**
	 * Used for loading the property urls from a given internal entity.
	 * 
	 * @param appMessage the given internal entity
	 * @return the value of property urls based on the given internal entity
	 */
	protected abstract java.util.List<java.lang.String> load_Urls(AppMessage appMessage);
	
	
	
	/////////////////////////
	// save/load functions //
	/////////////////////////
	
	/**
	 * Loads this DTO from an entity object of type "AppMessage".
	 * 
	 * @param appMessage the entity object from which this DTO is loaded. 
	 */
	@Override
	public void loadFrom(AppMessage appMessage) {
		this.uid = appMessage.getExtuid();
		this.title = appMessage.getTitle();
		this.message = appMessage.getMessage();
		this.creationDate = appMessage.getCreationDate();
		this.images = this.load_Images(appMessage);
		this.videoUrl = appMessage.getVideoUrl();
		this.videoOnly = appMessage.isVideoOnly();
		this.urls = this.load_Urls(appMessage);
	}
	
	/**
	 * Saves this DTO to an entity object of type "AppMessage".
	 * 
	 * @param appMessage the entity object to which this DTO is saved. 
	 * @throws BadDtoEntityModificationException If this DTO is not valid for saving. 
	 */
	@Override
	public void saveTo(AppMessage appMessage) throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException {
		//Disabled save for property: uid
		//Disabled save for property: title
		//Disabled save for property: message
		//Disabled save for property: creationDate
		//Disabled save for property: images
		//Disabled save for property: videoUrl
		//Disabled save for property: videoOnly
		//Disabled save for property: urls
	}
	
	
	
	//////////////
	// toString //
	//////////////
	
	@Override
	protected Map<String, Object> toStringData() {
		Map<String, Object> data = super.toStringData();
		data.put("uid", this.uid);
		data.put("title", this.title);
		data.put("message", this.message);
		data.put("creationDate", this.creationDate);
		data.put("images", this.images);
		data.put("videoUrl", this.videoUrl);
		data.put("videoOnly", this.videoOnly);
		data.put("urls", this.urls);
		return data;
	}
	
}
