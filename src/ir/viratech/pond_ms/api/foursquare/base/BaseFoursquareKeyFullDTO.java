package ir.viratech.pond_ms.api.foursquare.base;

import static ir.viratech.commons.api.field_info.FieldInfoContextProvider.getFieldInfoContextInstance;
import ir.viratech.pond_ms.api.foursquare.dto.FoursquareKeyFullDTO;
import ir.viratech.pond_ms.model.foursquare.FoursquareKey;

import java.util.Map;

import com.fasterxml.jackson.annotation.JsonProperty;


/**
 * A base DTO for class "FoursquareKey".
 * Do not edit this file.
 * It is an automatically generated class.
 *
 */
public abstract class BaseFoursquareKeyFullDTO extends ir.viratech.commons.api.dto.AbstractFullDTO<FoursquareKey> {
	
	
	/**
	 * 
	 * Base FieldInfoContext for "FoursquareKeyFullDTO".
	 *
	 */
	public static abstract class BaseFieldInfoContext extends ir.viratech.commons.api.search.field.AbstractFieldInfoContext<FoursquareKeyFullDTO> {
		
		
		// =========== BEGIN createFieldInfo methods ===========
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "uid".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Uid(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "clientId".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_ClientId(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "clientSecret".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_ClientSecret(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "usedCount".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_UsedCount(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Integer(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "maxUsage".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_MaxUsage(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Integer(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		// =========== END createFieldInfo methods ===========
		
		/**
		 * The default constructor for BaseFieldInfoContext.
		 */
		protected BaseFieldInfoContext() {
			this.putFieldInfo(this.createFieldInfo_Uid("uid", "extuid", "extuid", null, "uid", true, false));
			this.putFieldInfo(this.createFieldInfo_ClientId("clientId", "clientId", "clientId", null, "clientId", true, false));
			this.putFieldInfo(this.createFieldInfo_ClientSecret("clientSecret", "clientSecret", "clientSecret", null, "clientSecret", true, false));
			this.putFieldInfo(this.createFieldInfo_UsedCount("usedCount", "usedCount", "usedCount", null, "usedCount", true, false));
			this.putFieldInfo(this.createFieldInfo_MaxUsage("maxUsage", "maxUsage", "maxUsage", null, "maxUsage", true, false));
		}
		
		/**
		 * Creates a DTO of type "FoursquareKeyFullDTO".
		 *
		 * @return the created DTO
		 */
		@Override
		public FoursquareKeyFullDTO createDto() {
			return new FoursquareKeyFullDTO();
		}
		
	}
	
	/**
	 * Provides the corresponding FieldInfoContext of this DTO.
	 *
	 * @return the corresponding FieldInfoContext object
	 */
	public FoursquareKeyFullDTO.FieldInfoContext getFieldInfoContext() {
		return getFieldInfoContextInstance(FoursquareKeyFullDTO.FieldInfoContext.class);
	}
	
	
	
	
	////////////////////
	// DTO Properties //
	////////////////////
	
	// uid
	
	private String uid;
	
	/**
	 * Getter for property "uid".
	 *
	 * @return the value of property "uid"
	 */
	@JsonProperty
	public String getUid() {
		return this.uid;
	}
	
	
	// clientId
	
	private String clientId;
	
	/**
	 * Getter for property "clientId".
	 *
	 * @return the value of property "clientId"
	 */
	@JsonProperty
	public String getClientId() {
		return this.clientId;
	}
	
	/**
	 * Setter for property "clientId".
	 *
	 * @param clientId the new value for property "clientId"
	 */
	public void setClientId(String clientId) {
		this.clientId = clientId;
	}
	
	
	// clientSecret
	
	private String clientSecret;
	
	/**
	 * Getter for property "clientSecret".
	 *
	 * @return the value of property "clientSecret"
	 */
	@JsonProperty
	public String getClientSecret() {
		return this.clientSecret;
	}
	
	/**
	 * Setter for property "clientSecret".
	 *
	 * @param clientSecret the new value for property "clientSecret"
	 */
	public void setClientSecret(String clientSecret) {
		this.clientSecret = clientSecret;
	}
	
	
	// usedCount
	
	private int usedCount;
	
	/**
	 * Getter for property "usedCount".
	 *
	 * @return the value of property "usedCount"
	 */
	@JsonProperty
	public int getUsedCount() {
		return this.usedCount;
	}
	
	/**
	 * Setter for property "usedCount".
	 *
	 * @param usedCount the new value for property "usedCount"
	 */
	public void setUsedCount(int usedCount) {
		this.usedCount = usedCount;
	}
	
	
	// maxUsage
	
	private int maxUsage;
	
	/**
	 * Getter for property "maxUsage".
	 *
	 * @return the value of property "maxUsage"
	 */
	@JsonProperty
	public int getMaxUsage() {
		return this.maxUsage;
	}
	
	/**
	 * Setter for property "maxUsage".
	 *
	 * @param maxUsage the new value for property "maxUsage"
	 */
	public void setMaxUsage(int maxUsage) {
		this.maxUsage = maxUsage;
	}
	
	
	
	/////////////////////////
	// save/load functions //
	/////////////////////////
	
	/**
	 * Loads this DTO from an entity object of type "FoursquareKey".
	 * 
	 * @param foursquareKey the entity object from which this DTO is loaded. 
	 */
	@Override
	public void loadFrom(FoursquareKey foursquareKey) {
		this.uid = foursquareKey.getExtuid();
		this.clientId = foursquareKey.getClientId();
		this.clientSecret = foursquareKey.getClientSecret();
		this.usedCount = foursquareKey.getUsedCount();
		this.maxUsage = foursquareKey.getMaxUsage();
	}
	
	/**
	 * Saves this DTO to an entity object of type "FoursquareKey".
	 * 
	 * @param foursquareKey the entity object to which this DTO is saved. 
	 * @throws BadDtoEntityModificationException If this DTO is not valid for saving. 
	 */
	@Override
	public void saveTo(FoursquareKey foursquareKey) throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException {
		//Disabled save for property: uid
		foursquareKey.setClientId(this.clientId);
		foursquareKey.setClientSecret(this.clientSecret);
		foursquareKey.setUsedCount(this.usedCount);
		foursquareKey.setMaxUsage(this.maxUsage);
	}
	
	
	
	//////////////
	// toString //
	//////////////
	
	@Override
	protected Map<String, Object> toStringData() {
		Map<String, Object> data = super.toStringData();
		data.put("uid", this.uid);
		data.put("clientId", this.clientId);
		data.put("clientSecret", this.clientSecret);
		data.put("usedCount", this.usedCount);
		data.put("maxUsage", this.maxUsage);
		return data;
	}
	
}
