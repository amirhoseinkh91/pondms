package ir.viratech.pond_ms.api.review.base;

import static ir.viratech.commons.api.field_info.FieldInfoContextProvider.getFieldInfoContextInstance;
import ir.viratech.pond_ms.api.review.dto.ReviewFullDTO;
import ir.viratech.pond_ms.model.review.Review;

import java.util.Map;

import com.fasterxml.jackson.annotation.JsonProperty;


/**
 * A base DTO for class "Review".
 * Do not edit this file.
 * It is an automatically generated class.
 *
 */
public abstract class BaseReviewFullDTO extends ir.viratech.commons.api.dto.AbstractFullDTO<Review> {
	
	
	/**
	 * 
	 * Base FieldInfoContext for "ReviewFullDTO".
	 *
	 */
	public static abstract class BaseFieldInfoContext extends ir.viratech.commons.api.search.field.AbstractFieldInfoContext<ReviewFullDTO> {
		
		
		// =========== BEGIN createFieldInfo methods ===========
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "uid".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Uid(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "title".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Title(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "rate".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Rate(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Integer(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "text".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Text(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "creationDate".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_CreationDate(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "visitedDate".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_VisitedDate(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "typeOfVisit".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_TypeOfVisit(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "confirmed".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Confirmed(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Integer(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "deleted".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Deleted(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Boolean(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "voteUpCount".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_VoteUpCount(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Long(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "voteDownCount".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_VoteDownCount(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Long(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "replies".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Replies(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * Creates an EntityByDtoFinder for the DTO property "user".
		 * The created object finds entities of type "ir.viratech.pond_ms.model.user.User" 
		 * by DTO's of type "ir.viratech.pond_ms.api.user.dto.UserReviewDTO".
		 * @return the created EntityByDtoFinder
		 */
		protected abstract ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.user.User, ir.viratech.pond_ms.api.user.dto.UserReviewDTO> createEntityByDtoFinder_User();
		
		private ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.user.User, ir.viratech.pond_ms.api.user.dto.UserReviewDTO> entityByDtoFinder_User;
		
		/**
		 * Getter for the previously created EntityByDtoFinder for property "user".
		 * @return the previously created EntityByDtoFinder object 
		 */
		public final ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.user.User, ir.viratech.pond_ms.api.user.dto.UserReviewDTO> getEntityByDtoFinder_User() {
			return this.entityByDtoFinder_User;
		}
		
		/**
		 * Finds entities of type "ir.viratech.pond_ms.model.user.User" 
		 * by DTO's of type "ir.viratech.pond_ms.api.user.dto.UserReviewDTO".
		 * It is targeted for the DTO property: user
		 * @param userDto 
		 *		the given dto by which the entity should be found
		 * @return the found entity
		 * @throws ir.viratech.commons.api.search.InvalidDtoException
		 * 		If the given dto is not valid or is not representing an internal entity
		 */
		public final ir.viratech.pond_ms.model.user.User findByDto_User(ir.viratech.pond_ms.api.user.dto.UserReviewDTO userDto) throws ir.viratech.commons.api.search.InvalidDtoException {
			return this.getEntityByDtoFinder_User().findByDto(userDto);
		}
		
		
		/**
		 * Creates an EntityByDtoFinder for the DTO property "gisVectorObject".
		 * The created object finds entities of type "ir.viratech.pond_ms.model.map_object.vector.GISVectorObject" 
		 * by DTO's of type "ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectFullDTO".
		 * @return the created EntityByDtoFinder
		 */
		protected abstract ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.map_object.vector.GISVectorObject, ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectFullDTO> createEntityByDtoFinder_GisVectorObject();
		
		private ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.map_object.vector.GISVectorObject, ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectFullDTO> entityByDtoFinder_GisVectorObject;
		
		/**
		 * Getter for the previously created EntityByDtoFinder for property "gisVectorObject".
		 * @return the previously created EntityByDtoFinder object 
		 */
		public final ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.map_object.vector.GISVectorObject, ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectFullDTO> getEntityByDtoFinder_GisVectorObject() {
			return this.entityByDtoFinder_GisVectorObject;
		}
		
		/**
		 * Finds entities of type "ir.viratech.pond_ms.model.map_object.vector.GISVectorObject" 
		 * by DTO's of type "ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectFullDTO".
		 * It is targeted for the DTO property: gisVectorObject
		 * @param gisVectorObjectDto 
		 *		the given dto by which the entity should be found
		 * @return the found entity
		 * @throws ir.viratech.commons.api.search.InvalidDtoException
		 * 		If the given dto is not valid or is not representing an internal entity
		 */
		public final ir.viratech.pond_ms.model.map_object.vector.GISVectorObject findByDto_GisVectorObject(ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectFullDTO gisVectorObjectDto) throws ir.viratech.commons.api.search.InvalidDtoException {
			return this.getEntityByDtoFinder_GisVectorObject().findByDto(gisVectorObjectDto);
		}
		
		
		// =========== END createFieldInfo methods ===========
		
		/**
		 * The default constructor for BaseFieldInfoContext.
		 */
		protected BaseFieldInfoContext() {
			this.putFieldInfo(this.createFieldInfo_Uid("uid", "extuid", "extuid", null, "uid", true, false));
			this.putFieldInfo(this.createFieldInfo_Title("title", "title", "title", null, "title", true, null));
			this.putFieldInfo(this.createFieldInfo_Rate("rate", "rate", "rate", null, "rate", true, null));
			this.putFieldInfo(this.createFieldInfo_Text("text", "text", "text", null, "text", true, null));
			this.putFieldInfo(this.createFieldInfo_CreationDate("creationDate", "creationDateString", "creationDateString", null, "creationDate", true, null));
			this.putFieldInfo(this.createFieldInfo_VisitedDate("visitedDate", "visitedDateString", "visitedDateString", null, "visitedDate", true, null));
			this.putFieldInfo(this.createFieldInfo_TypeOfVisit("typeOfVisit", "typeOfVisit", "typeOfVisit", null, "typeOfVisit", true, null));
			this.putFieldInfo(this.createFieldInfo_Confirmed("confirmed", "confirmed", "confirmed", null, "confirmed", true, null));
			this.putFieldInfo(this.createFieldInfo_Deleted("deleted", "deleted", "deleted", null, "deleted", true, null));
			this.putFieldInfo(this.createFieldInfo_VoteUpCount("voteUpCount", "voteUpCount", "voteUpCount", null, "voteUpCount", true, null));
			this.putFieldInfo(this.createFieldInfo_VoteDownCount("voteDownCount", "voteDownCount", "voteDownCount", null, "voteDownCount", true, null));
			this.putFieldInfo(this.createFieldInfo_Replies("replies", "replies", "replies", null, "replies", true, null));
			//Disabled fieldInfo for property: user
			//Disabled fieldInfo for property: gisVectorObject
		}
		
		/**
		 * Creates a DTO of type "ReviewFullDTO".
		 *
		 * @return the created DTO
		 */
		@Override
		public ReviewFullDTO createDto() {
			return new ReviewFullDTO();
		}
		
	}
	
	/**
	 * Provides the corresponding FieldInfoContext of this DTO.
	 *
	 * @return the corresponding FieldInfoContext object
	 */
	public ReviewFullDTO.FieldInfoContext getFieldInfoContext() {
		return getFieldInfoContextInstance(ReviewFullDTO.FieldInfoContext.class);
	}
	
	
	
	
	////////////////////
	// DTO Properties //
	////////////////////
	
	// uid
	
	private String uid;
	
	/**
	 * Getter for property "uid".
	 *
	 * @return the value of property "uid"
	 */
	@JsonProperty
	public String getUid() {
		return this.uid;
	}
	
	
	// title
	
	private String title;
	
	/**
	 * Getter for property "title".
	 *
	 * @return the value of property "title"
	 */
	@JsonProperty
	public String getTitle() {
		return this.title;
	}
	
	/**
	 * Setter for property "title".
	 *
	 * @param title the new value for property "title"
	 */
	public void setTitle(String title) {
		this.title = title;
	}
	
	
	// rate
	
	private int rate;
	
	/**
	 * Getter for property "rate".
	 *
	 * @return the value of property "rate"
	 */
	@JsonProperty
	public int getRate() {
		return this.rate;
	}
	
	/**
	 * Setter for property "rate".
	 *
	 * @param rate the new value for property "rate"
	 */
	public void setRate(int rate) {
		this.rate = rate;
	}
	
	
	// text
	
	private String text;
	
	/**
	 * Getter for property "text".
	 *
	 * @return the value of property "text"
	 */
	@JsonProperty
	public String getText() {
		return this.text;
	}
	
	/**
	 * Setter for property "text".
	 *
	 * @param text the new value for property "text"
	 */
	public void setText(String text) {
		this.text = text;
	}
	
	
	// creationDate
	
	private String creationDate;
	
	/**
	 * Getter for property "creationDate".
	 *
	 * @return the value of property "creationDate"
	 */
	@JsonProperty
	public String getCreationDate() {
		return this.creationDate;
	}
	
	
	// visitedDate
	
	private String visitedDate;
	
	/**
	 * Getter for property "visitedDate".
	 *
	 * @return the value of property "visitedDate"
	 */
	@JsonProperty
	public String getVisitedDate() {
		return this.visitedDate;
	}
	
	
	// typeOfVisit
	
	private String typeOfVisit;
	
	/**
	 * Getter for property "typeOfVisit".
	 *
	 * @return the value of property "typeOfVisit"
	 */
	@JsonProperty
	public String getTypeOfVisit() {
		return this.typeOfVisit;
	}
	
	/**
	 * Setter for property "typeOfVisit".
	 *
	 * @param typeOfVisit the new value for property "typeOfVisit"
	 */
	public void setTypeOfVisit(String typeOfVisit) {
		this.typeOfVisit = typeOfVisit;
	}
	
	
	// confirmed
	
	private int confirmed;
	
	/**
	 * Getter for property "confirmed".
	 *
	 * @return the value of property "confirmed"
	 */
	@JsonProperty
	public int getConfirmed() {
		return this.confirmed;
	}
	
	/**
	 * Setter for property "confirmed".
	 *
	 * @param confirmed the new value for property "confirmed"
	 */
	public void setConfirmed(int confirmed) {
		this.confirmed = confirmed;
	}
	
	
	// deleted
	
	private boolean deleted;
	
	/**
	 * Getter for property "deleted".
	 *
	 * @return the value of property "deleted"
	 */
	@JsonProperty
	public boolean isDeleted() {
		return this.deleted;
	}
	
	/**
	 * Setter for property "deleted".
	 *
	 * @param deleted the new value for property "deleted"
	 */
	public void setDeleted(boolean deleted) {
		this.deleted = deleted;
	}
	
	
	// voteUpCount
	
	private long voteUpCount;
	
	/**
	 * Getter for property "voteUpCount".
	 *
	 * @return the value of property "voteUpCount"
	 */
	@JsonProperty
	public long getVoteUpCount() {
		return this.voteUpCount;
	}
	
	
	// voteDownCount
	
	private long voteDownCount;
	
	/**
	 * Getter for property "voteDownCount".
	 *
	 * @return the value of property "voteDownCount"
	 */
	@JsonProperty
	public long getVoteDownCount() {
		return this.voteDownCount;
	}
	
	
	// replies
	
	private ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.review.ReplyReview, ir.viratech.pond_ms.api.review.dto.ReplyReviewFullDTO> replies;
	private boolean __modified__Replies = false;
	
	/**
	 * Getter for property "replies".
	 *
	 * @return the value of property "replies"
	 */
	@JsonProperty
	public ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.review.ReplyReview, ir.viratech.pond_ms.api.review.dto.ReplyReviewFullDTO> getReplies() {
		return this.replies;
	}
	
	/**
	 * Setter for property "replies".
	 *
	 * @param replies the new value for property "replies"
	 */
	public void setReplies(ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.review.ReplyReview, ir.viratech.pond_ms.api.review.dto.ReplyReviewFullDTO> replies) {
		this.__modified__Replies = true;
		this.replies = replies;
	}
	
	/**
	 * Shows the modification state of the property "replies".
	 * 
	 * @return true if the property is modified
	 */
	public boolean hasModifiedReplies() {
		return this.__modified__Replies;
	}
	
	/**
	 * Used for loading the property replies from a given internal entity.
	 * 
	 * @param review the given internal entity
	 * @return the value of property replies based on the given internal entity
	 */
	protected abstract ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.review.ReplyReview, ir.viratech.pond_ms.api.review.dto.ReplyReviewFullDTO> load_Replies(Review review);
	
	/**
	/**
	 * Used for saving a given value of property replies to a given internal entity.
	 * 
	 * @param review
	 * 		the given internal entity
	 * @param replies 
	 * 		the value of property replies which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property replies is not appropriate for saving the entity
	 */
	protected abstract void save_Replies(Review review, ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.review.ReplyReview, ir.viratech.pond_ms.api.review.dto.ReplyReviewFullDTO> replies)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException;
	
	
	// user
	
	private ir.viratech.pond_ms.api.user.dto.UserReviewDTO user;
	
	/**
	 * Getter for property "user".
	 *
	 * @return the value of property "user"
	 */
	@JsonProperty
	public ir.viratech.pond_ms.api.user.dto.UserReviewDTO getUser() {
		return this.user;
	}
	
	/**
	 * Used for loading the property user from a given internal entity.
	 * 
	 * @param review the given internal entity
	 * @return the value of property user based on the given internal entity
	 */
	protected abstract ir.viratech.pond_ms.api.user.dto.UserReviewDTO load_User(Review review);
	
	
	// gisVectorObject
	
	private ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectFullDTO gisVectorObject;
	
	/**
	 * Getter for property "gisVectorObject".
	 *
	 * @return the value of property "gisVectorObject"
	 */
	@JsonProperty
	public ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectFullDTO getGisVectorObject() {
		return this.gisVectorObject;
	}
	
	/**
	 * Used for loading the property gisVectorObject from a given internal entity.
	 * 
	 * @param review the given internal entity
	 * @return the value of property gisVectorObject based on the given internal entity
	 */
	protected ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectFullDTO load_GisVectorObject(Review review) {
		ir.viratech.pond_ms.model.map_object.vector.GISVectorObject __internalProperty_gisVectorObject = review.getGisVectorObject();
		if (__internalProperty_gisVectorObject == null)
			return null; 
		ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectFullDTO gisVectorObject = new ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectFullDTO();
		gisVectorObject.loadFrom(__internalProperty_gisVectorObject);
		return gisVectorObject;
	}
	
	
	
	/////////////////////////
	// save/load functions //
	/////////////////////////
	
	/**
	 * Loads this DTO from an entity object of type "Review".
	 * 
	 * @param review the entity object from which this DTO is loaded. 
	 */
	@Override
	public void loadFrom(Review review) {
		this.uid = review.getExtuid();
		this.title = review.getTitle();
		this.rate = review.getRate();
		this.text = review.getText();
		this.creationDate = review.getCreationDateString();
		this.visitedDate = review.getVisitedDateString();
		this.typeOfVisit = review.getTypeOfVisit();
		this.confirmed = review.getConfirmed();
		this.deleted = review.isDeleted();
		this.voteUpCount = review.getVoteUpCount();
		this.voteDownCount = review.getVoteDownCount();
		this.replies = this.load_Replies(review);
		this.user = this.load_User(review);
		this.gisVectorObject = this.load_GisVectorObject(review);
	}
	
	/**
	 * Saves this DTO to an entity object of type "Review".
	 * 
	 * @param review the entity object to which this DTO is saved. 
	 * @throws BadDtoEntityModificationException If this DTO is not valid for saving. 
	 */
	@Override
	public void saveTo(Review review) throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException {
		//Disabled save for property: uid
		review.setTitle(this.title);
		review.setRate(this.rate);
		review.setText(this.text);
		//Disabled save for property: creationDate
		//Disabled save for property: visitedDate
		review.setTypeOfVisit(this.typeOfVisit);
		review.setConfirmed(this.confirmed);
		review.setDeleted(this.deleted);
		//Disabled save for property: voteUpCount
		//Disabled save for property: voteDownCount
		if (this.hasModifiedReplies()) {
			this.save_Replies(review, this.replies);
		}
		//Disabled save for property: user
		//Disabled save for property: gisVectorObject
	}
	
	
	
	//////////////
	// toString //
	//////////////
	
	@Override
	protected Map<String, Object> toStringData() {
		Map<String, Object> data = super.toStringData();
		data.put("uid", this.uid);
		data.put("title", this.title);
		data.put("rate", this.rate);
		data.put("text", this.text);
		data.put("creationDate", this.creationDate);
		data.put("visitedDate", this.visitedDate);
		data.put("typeOfVisit", this.typeOfVisit);
		data.put("confirmed", this.confirmed);
		data.put("deleted", this.deleted);
		data.put("voteUpCount", this.voteUpCount);
		data.put("voteDownCount", this.voteDownCount);
		data.put("replies", this.replies);
		data.put("user", this.user);
		data.put("gisVectorObject", this.gisVectorObject);
		return data;
	}
	
}
