package ir.viratech.pond_ms.api.map_object.vector.base;

import static ir.viratech.commons.api.field_info.FieldInfoContextProvider.getFieldInfoContextInstance;
import ir.viratech.pond_ms.api.map_object.vector.dto.GISVectorObjectFullDTO;
import ir.viratech.pond_ms.model.map_object.vector.GISVectorObject;

import java.util.Map;

import com.fasterxml.jackson.annotation.JsonProperty;


/**
 * A base DTO for class "GISVectorObject".
 * Do not edit this file.
 * It is an automatically generated class.
 *
 */
public abstract class BaseGISVectorObjectFullDTO extends ir.viratech.commons.api.dto.AbstractFullDTO<GISVectorObject> {
	
	
	/**
	 * 
	 * Base FieldInfoContext for "GISVectorObjectFullDTO".
	 *
	 */
	public static abstract class BaseFieldInfoContext extends ir.viratech.commons.api.search.field.AbstractFieldInfoContext<GISVectorObjectFullDTO> {
		
		
		// =========== BEGIN createFieldInfo methods ===========
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "uid".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Uid(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "name".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Name(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "creationDate".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_CreationDate(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Timestamp(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "type".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Type(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "formInstance".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_FormInstance(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "point".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Point(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "line".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Line(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "polygon".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Polygon(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * Creates an EntityByDtoFinder for the DTO property "layer".
		 * The created object finds entities of type "ir.viratech.pond_ms.model.layer.VectorLayer" 
		 * by DTO's of type "ir.viratech.pond_ms.api.layer.dto.LayerLightDTO".
		 * @return the created EntityByDtoFinder
		 */
		protected abstract ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.VectorLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> createEntityByDtoFinder_Layer();
		
		private ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.VectorLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> entityByDtoFinder_Layer;
		
		/**
		 * Getter for the previously created EntityByDtoFinder for property "layer".
		 * @return the previously created EntityByDtoFinder object 
		 */
		public final ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.VectorLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> getEntityByDtoFinder_Layer() {
			return this.entityByDtoFinder_Layer;
		}
		
		/**
		 * Finds entities of type "ir.viratech.pond_ms.model.layer.VectorLayer" 
		 * by DTO's of type "ir.viratech.pond_ms.api.layer.dto.LayerLightDTO".
		 * It is targeted for the DTO property: layer
		 * @param layerDto 
		 *		the given dto by which the entity should be found
		 * @return the found entity
		 * @throws ir.viratech.commons.api.search.InvalidDtoException
		 * 		If the given dto is not valid or is not representing an internal entity
		 */
		public final ir.viratech.pond_ms.model.layer.VectorLayer findByDto_Layer(ir.viratech.pond_ms.api.layer.dto.LayerLightDTO layerDto) throws ir.viratech.commons.api.search.InvalidDtoException {
			return this.getEntityByDtoFinder_Layer().findByDto(layerDto);
		}
		
		/**
		 * creates a DtoFieldInfo for dto-property "layer".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param fieldInfoContext the FieldInfoContext of the dto-property: layer
		 * @param entityByDtoFinder the EntityByDtoFinder for the dto-property: layer
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.DtoFieldInfo<ir.viratech.pond_ms.model.layer.VectorLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> createFieldInfo_Layer(
				String externalName, String internalName, String internalSearchExpression, String bundleKey, boolean searchable, 
				ir.viratech.commons.api.search.field.FieldInfoContext<ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> fieldInfoContext, 
				ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.layer.VectorLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO> entityByDtoFinder) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Dto<ir.viratech.pond_ms.model.layer.VectorLayer, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO>(
						externalName, internalName, internalSearchExpression, bundleKey, searchable, fieldInfoContext, entityByDtoFinder);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "timeSeries".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_TimeSeries(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * Creates an EntityByDtoFinder for the DTO property "organization".
		 * The created object finds entities of type "ir.viratech.pond_ms.model.organization.Organization" 
		 * by DTO's of type "ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO".
		 * @return the created EntityByDtoFinder
		 */
		protected abstract ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.organization.Organization, ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO> createEntityByDtoFinder_Organization();
		
		private ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.organization.Organization, ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO> entityByDtoFinder_Organization;
		
		/**
		 * Getter for the previously created EntityByDtoFinder for property "organization".
		 * @return the previously created EntityByDtoFinder object 
		 */
		public final ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.organization.Organization, ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO> getEntityByDtoFinder_Organization() {
			return this.entityByDtoFinder_Organization;
		}
		
		/**
		 * Finds entities of type "ir.viratech.pond_ms.model.organization.Organization" 
		 * by DTO's of type "ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO".
		 * It is targeted for the DTO property: organization
		 * @param organizationDto 
		 *		the given dto by which the entity should be found
		 * @return the found entity
		 * @throws ir.viratech.commons.api.search.InvalidDtoException
		 * 		If the given dto is not valid or is not representing an internal entity
		 */
		public final ir.viratech.pond_ms.model.organization.Organization findByDto_Organization(ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO organizationDto) throws ir.viratech.commons.api.search.InvalidDtoException {
			return this.getEntityByDtoFinder_Organization().findByDto(organizationDto);
		}
		
		/**
		 * creates a DtoFieldInfo for dto-property "organization".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param fieldInfoContext the FieldInfoContext of the dto-property: organization
		 * @param entityByDtoFinder the EntityByDtoFinder for the dto-property: organization
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.DtoFieldInfo<ir.viratech.pond_ms.model.organization.Organization, ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO> createFieldInfo_Organization(
				String externalName, String internalName, String internalSearchExpression, String bundleKey, boolean searchable, 
				ir.viratech.commons.api.search.field.FieldInfoContext<ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO> fieldInfoContext, 
				ir.viratech.commons.api.search.EntityByDtoFinder<ir.viratech.pond_ms.model.organization.Organization, ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO> entityByDtoFinder) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Dto<ir.viratech.pond_ms.model.organization.Organization, ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO>(
						externalName, internalName, internalSearchExpression, bundleKey, searchable, fieldInfoContext, entityByDtoFinder);
		}
		
		
		// =========== END createFieldInfo methods ===========
		
		/**
		 * The default constructor for BaseFieldInfoContext.
		 */
		protected BaseFieldInfoContext() {
			this.putFieldInfo(this.createFieldInfo_Uid("uid", "extuid", "extuid", null, "uid", true, false));
			this.putFieldInfo(this.createFieldInfo_Name("name", "name", "name", null, "name", true, null));
			this.putFieldInfo(this.createFieldInfo_CreationDate("creationDate", "creationDate", "creationDate", null, "creationDate", true, true));
			this.putFieldInfo(this.createFieldInfo_Type("type", "type", "type", null, "type", true, false));
			this.putFieldInfo(this.createFieldInfo_FormInstance("formInstance", "formInstance", "formInstance", null, "formInstance", true, null));
			this.putFieldInfo(this.createFieldInfo_Point("point", "point", "point", "string", "point", true, null));
			this.putFieldInfo(this.createFieldInfo_Line("line", "line", "line", "string", "line", true, null));
			this.putFieldInfo(this.createFieldInfo_Polygon("polygon", "polygon", "polygon", "string", "polygon", true, null));
			this.entityByDtoFinder_Layer = createEntityByDtoFinder_Layer();
			this.putFieldInfo(this.createFieldInfo_Layer("layer", "layer", "layer", "layer", true, 
					getFieldInfoContextInstance(ir.viratech.pond_ms.api.layer.dto.LayerLightDTO.FieldInfoContext.class), this.getEntityByDtoFinder_Layer()));
			this.putFieldInfo(this.createFieldInfo_TimeSeries("timeSeries", "timeSeries", "timeSeries", "collection", "timeSeries", true, null));
			this.entityByDtoFinder_Organization = createEntityByDtoFinder_Organization();
			this.putFieldInfo(this.createFieldInfo_Organization("organization", "organization", "organization", "organization", true, 
					getFieldInfoContextInstance(ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO.FieldInfoContext.class), this.getEntityByDtoFinder_Organization()));
		}
		
		/**
		 * Creates a DTO of type "GISVectorObjectFullDTO".
		 *
		 * @return the created DTO
		 */
		@Override
		public GISVectorObjectFullDTO createDto() {
			return new GISVectorObjectFullDTO();
		}
		
	}
	
	/**
	 * Provides the corresponding FieldInfoContext of this DTO.
	 *
	 * @return the corresponding FieldInfoContext object
	 */
	public GISVectorObjectFullDTO.FieldInfoContext getFieldInfoContext() {
		return getFieldInfoContextInstance(GISVectorObjectFullDTO.FieldInfoContext.class);
	}
	
	
	
	
	////////////////////
	// DTO Properties //
	////////////////////
	
	// uid
	
	private String uid;
	
	/**
	 * Getter for property "uid".
	 *
	 * @return the value of property "uid"
	 */
	@JsonProperty
	public String getUid() {
		return this.uid;
	}
	
	
	// name
	
	private String name;
	
	/**
	 * Getter for property "name".
	 *
	 * @return the value of property "name"
	 */
	@JsonProperty
	public String getName() {
		return this.name;
	}
	
	/**
	 * Setter for property "name".
	 *
	 * @param name the new value for property "name"
	 */
	public void setName(String name) {
		this.name = name;
	}
	
	/**
	/**
	 * Used for saving a given value of property name to a given internal entity.
	 * 
	 * @param gISVectorObject
	 * 		the given internal entity
	 * @param name 
	 * 		the value of property name which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property name is not appropriate for saving the entity
	 */
	protected void save_Name(GISVectorObject gISVectorObject, String name)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException {
		gISVectorObject.setName((String) name);
	}
	
	
	// creationDate
	
	private java.util.Date creationDate;
	
	/**
	 * Getter for property "creationDate".
	 *
	 * @return the value of property "creationDate"
	 */
	@JsonProperty
	public java.util.Date getCreationDate() {
		return this.creationDate;
	}
	
	
	// type
	
	private String type;
	
	/**
	 * Getter for property "type".
	 *
	 * @return the value of property "type"
	 */
	@JsonProperty
	public String getType() {
		return this.type;
	}
	
	/**
	 * Used for loading the property type from a given internal entity.
	 * 
	 * @param gISVectorObject the given internal entity
	 * @return the value of property type based on the given internal entity
	 */
	protected abstract String load_Type(GISVectorObject gISVectorObject);
	
	
	// formInstance
	
	private ir.viratech.commons.cm.model.entity_instance.EntityInstance formInstance;
	
	/**
	 * Getter for property "formInstance".
	 *
	 * @return the value of property "formInstance"
	 */
	@JsonProperty
	public ir.viratech.commons.cm.model.entity_instance.EntityInstance getFormInstance() {
		return this.formInstance;
	}
	
	/**
	 * Setter for property "formInstance".
	 *
	 * @param formInstance the new value for property "formInstance"
	 */
	public void setFormInstance(ir.viratech.commons.cm.model.entity_instance.EntityInstance formInstance) {
		this.formInstance = formInstance;
	}
	
	/**
	 * Used for loading the property formInstance from a given internal entity.
	 * 
	 * @param gISVectorObject the given internal entity
	 * @return the value of property formInstance based on the given internal entity
	 */
	protected abstract ir.viratech.commons.cm.model.entity_instance.EntityInstance load_FormInstance(GISVectorObject gISVectorObject);
	
	/**
	/**
	 * Used for saving a given value of property formInstance to a given internal entity.
	 * 
	 * @param gISVectorObject
	 * 		the given internal entity
	 * @param formInstance 
	 * 		the value of property formInstance which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property formInstance is not appropriate for saving the entity
	 */
	protected abstract void save_FormInstance(GISVectorObject gISVectorObject, ir.viratech.commons.cm.model.entity_instance.EntityInstance formInstance)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException;
	
	
	// point
	
	private ir.viratech.pond_ms.commons.geo.Point point;
	
	/**
	 * Getter for property "point".
	 *
	 * @return the value of property "point"
	 */
	@JsonProperty
	public ir.viratech.pond_ms.commons.geo.Point getPoint() {
		return this.point;
	}
	
	/**
	 * Setter for property "point".
	 *
	 * @param point the new value for property "point"
	 */
	public void setPoint(ir.viratech.pond_ms.commons.geo.Point point) {
		this.point = point;
	}
	
	/**
	 * Used for loading the property point from a given internal entity.
	 * 
	 * @param gISVectorObject the given internal entity
	 * @return the value of property point based on the given internal entity
	 */
	protected abstract ir.viratech.pond_ms.commons.geo.Point load_Point(GISVectorObject gISVectorObject);
	
	/**
	/**
	 * Used for saving a given value of property point to a given internal entity.
	 * 
	 * @param gISVectorObject
	 * 		the given internal entity
	 * @param point 
	 * 		the value of property point which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property point is not appropriate for saving the entity
	 */
	protected abstract void save_Point(GISVectorObject gISVectorObject, ir.viratech.pond_ms.commons.geo.Point point)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException;
	
	
	// line
	
	private ir.viratech.pond_ms.commons.geo.LineString line;
	
	/**
	 * Getter for property "line".
	 *
	 * @return the value of property "line"
	 */
	@JsonProperty
	public ir.viratech.pond_ms.commons.geo.LineString getLine() {
		return this.line;
	}
	
	/**
	 * Setter for property "line".
	 *
	 * @param line the new value for property "line"
	 */
	public void setLine(ir.viratech.pond_ms.commons.geo.LineString line) {
		this.line = line;
	}
	
	/**
	 * Used for loading the property line from a given internal entity.
	 * 
	 * @param gISVectorObject the given internal entity
	 * @return the value of property line based on the given internal entity
	 */
	protected abstract ir.viratech.pond_ms.commons.geo.LineString load_Line(GISVectorObject gISVectorObject);
	
	/**
	/**
	 * Used for saving a given value of property line to a given internal entity.
	 * 
	 * @param gISVectorObject
	 * 		the given internal entity
	 * @param line 
	 * 		the value of property line which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property line is not appropriate for saving the entity
	 */
	protected abstract void save_Line(GISVectorObject gISVectorObject, ir.viratech.pond_ms.commons.geo.LineString line)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException;
	
	
	// polygon
	
	private ir.viratech.pond_ms.commons.geo.Polygon polygon;
	
	/**
	 * Getter for property "polygon".
	 *
	 * @return the value of property "polygon"
	 */
	@JsonProperty
	public ir.viratech.pond_ms.commons.geo.Polygon getPolygon() {
		return this.polygon;
	}
	
	/**
	 * Setter for property "polygon".
	 *
	 * @param polygon the new value for property "polygon"
	 */
	public void setPolygon(ir.viratech.pond_ms.commons.geo.Polygon polygon) {
		this.polygon = polygon;
	}
	
	/**
	 * Used for loading the property polygon from a given internal entity.
	 * 
	 * @param gISVectorObject the given internal entity
	 * @return the value of property polygon based on the given internal entity
	 */
	protected abstract ir.viratech.pond_ms.commons.geo.Polygon load_Polygon(GISVectorObject gISVectorObject);
	
	/**
	/**
	 * Used for saving a given value of property polygon to a given internal entity.
	 * 
	 * @param gISVectorObject
	 * 		the given internal entity
	 * @param polygon 
	 * 		the value of property polygon which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property polygon is not appropriate for saving the entity
	 */
	protected abstract void save_Polygon(GISVectorObject gISVectorObject, ir.viratech.pond_ms.commons.geo.Polygon polygon)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException;
	
	
	// layer
	
	private ir.viratech.pond_ms.api.layer.dto.LayerLightDTO layer;
	private boolean __modified__Layer = false;
	
	/**
	 * Getter for property "layer".
	 *
	 * @return the value of property "layer"
	 */
	@JsonProperty
	public ir.viratech.pond_ms.api.layer.dto.LayerLightDTO getLayer() {
		return this.layer;
	}
	
	/**
	 * Setter for property "layer".
	 *
	 * @param layer the new value for property "layer"
	 */
	public void setLayer(ir.viratech.pond_ms.api.layer.dto.LayerLightDTO layer) {
		this.__modified__Layer = true;
		this.layer = layer;
	}
	
	/**
	 * Shows the modification state of the property "layer".
	 * 
	 * @return true if the property is modified
	 */
	public boolean hasModifiedLayer() {
		return this.__modified__Layer;
	}
	
	/**
	 * Used for loading the property layer from a given internal entity.
	 * 
	 * @param gISVectorObject the given internal entity
	 * @return the value of property layer based on the given internal entity
	 */
	protected ir.viratech.pond_ms.api.layer.dto.LayerLightDTO load_Layer(GISVectorObject gISVectorObject) {
		ir.viratech.pond_ms.model.layer.VectorLayer __internalProperty_layer = gISVectorObject.getLayer();
		if (__internalProperty_layer == null)
			return null; 
		ir.viratech.pond_ms.api.layer.dto.LayerLightDTO layer = new ir.viratech.pond_ms.api.layer.dto.LayerLightDTO();
		layer.loadFrom(__internalProperty_layer);
		return layer;
	}
	
	/**
	/**
	 * Used for saving a given value of property layer to a given internal entity.
	 * 
	 * @param gISVectorObject
	 * 		the given internal entity
	 * @param layerDto 
	 * 		the value of property layer which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property layer is not appropriate for saving the entity
	 */
	protected void save_Layer(GISVectorObject gISVectorObject, ir.viratech.pond_ms.api.layer.dto.LayerLightDTO layerDto)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException {
		ir.viratech.pond_ms.model.layer.VectorLayer __internalProperty_layer = null;
		if (layerDto != null) {
			try {
				__internalProperty_layer = findByDto_Layer(layerDto);
			} catch (ir.viratech.commons.api.search.InvalidDtoException e) {
				throw new ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException("The given dto is invalid: "+layerDto, e);
			}
			if (__internalProperty_layer == null)
				throw new ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException("No entity was found for the given dto: "+layerDto);
		}
		gISVectorObject.setLayer(__internalProperty_layer);
	}
	
	/**
	 * Finds entities based on the DTO property "layer".
	 * It finds entities of type "ir.viratech.pond_ms.model.layer.VectorLayer" 
	 * based on DTO's of type "ir.viratech.pond_ms.api.layer.dto.LayerLightDTO",
	 * targeted on the DTO property "layer".
	 * 
	 * @param layerDto 
	 *		the given dto by which the entity should be found
	 * @return the found entity
	 * @throws ir.viratech.commons.api.search.InvalidDtoException
	 * 		If the given dto is not valid or is not representing an internal entity  
	 */
	protected ir.viratech.pond_ms.model.layer.VectorLayer findByDto_Layer(ir.viratech.pond_ms.api.layer.dto.LayerLightDTO layerDto) throws ir.viratech.commons.api.search.InvalidDtoException {
		return this.getFieldInfoContext().findByDto_Layer(layerDto);
	}
	
	
	// timeSeries
	
	private ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.time_series.Category, ir.viratech.pond_ms.api.time_series.dto.CategoryLightDTO> timeSeries;
	
	/**
	 * Getter for property "timeSeries".
	 *
	 * @return the value of property "timeSeries"
	 */
	@JsonProperty
	public ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.time_series.Category, ir.viratech.pond_ms.api.time_series.dto.CategoryLightDTO> getTimeSeries() {
		return this.timeSeries;
	}
	
	/**
	 * Setter for property "timeSeries".
	 *
	 * @param timeSeries the new value for property "timeSeries"
	 */
	public void setTimeSeries(ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.time_series.Category, ir.viratech.pond_ms.api.time_series.dto.CategoryLightDTO> timeSeries) {
		this.timeSeries = timeSeries;
	}
	
	/**
	 * Used for loading the property timeSeries from a given internal entity.
	 * 
	 * @param gISVectorObject the given internal entity
	 * @return the value of property timeSeries based on the given internal entity
	 */
	protected abstract ir.viratech.commons.api.dto.PlainCollectionDTO<ir.viratech.pond_ms.model.time_series.Category, ir.viratech.pond_ms.api.time_series.dto.CategoryLightDTO> load_TimeSeries(GISVectorObject gISVectorObject);
	
	
	// organization
	
	private ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO organization;
	private boolean __modified__Organization = false;
	
	/**
	 * Getter for property "organization".
	 *
	 * @return the value of property "organization"
	 */
	@JsonProperty
	public ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO getOrganization() {
		return this.organization;
	}
	
	/**
	 * Shows the modification state of the property "organization".
	 * 
	 * @return true if the property is modified
	 */
	public boolean hasModifiedOrganization() {
		return this.__modified__Organization;
	}
	
	/**
	 * Used for loading the property organization from a given internal entity.
	 * 
	 * @param gISVectorObject the given internal entity
	 * @return the value of property organization based on the given internal entity
	 */
	protected ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO load_Organization(GISVectorObject gISVectorObject) {
		ir.viratech.pond_ms.model.organization.Organization __internalProperty_organization = gISVectorObject.getOrganization();
		if (__internalProperty_organization == null)
			return null; 
		ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO organization = new ir.viratech.pond_ms.api.organization.dto.OrganizationFullDTO();
		organization.loadFrom(__internalProperty_organization);
		return organization;
	}
	
	
	
	/////////////////////////
	// save/load functions //
	/////////////////////////
	
	/**
	 * Loads this DTO from an entity object of type "GISVectorObject".
	 * 
	 * @param gISVectorObject the entity object from which this DTO is loaded. 
	 */
	@Override
	public void loadFrom(GISVectorObject gISVectorObject) {
		this.uid = gISVectorObject.getExtuid();
		this.name = gISVectorObject.getName();
		this.creationDate = gISVectorObject.getCreationDate();
		this.type = this.load_Type(gISVectorObject);
		this.formInstance = this.load_FormInstance(gISVectorObject);
		this.point = this.load_Point(gISVectorObject);
		this.line = this.load_Line(gISVectorObject);
		this.polygon = this.load_Polygon(gISVectorObject);
		this.layer = this.load_Layer(gISVectorObject);
		this.timeSeries = this.load_TimeSeries(gISVectorObject);
		this.organization = this.load_Organization(gISVectorObject);
	}
	
	/**
	 * Saves this DTO to an entity object of type "GISVectorObject".
	 * 
	 * @param gISVectorObject the entity object to which this DTO is saved. 
	 * @throws BadDtoEntityModificationException If this DTO is not valid for saving. 
	 */
	@Override
	public void saveTo(GISVectorObject gISVectorObject) throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException {
		//Disabled save for property: uid
		this.save_Name(gISVectorObject, this.name);
		//Disabled save for property: creationDate
		//Disabled save for property: type
		this.save_FormInstance(gISVectorObject, this.formInstance);
		this.save_Point(gISVectorObject, this.point);
		this.save_Line(gISVectorObject, this.line);
		this.save_Polygon(gISVectorObject, this.polygon);
		if (this.hasModifiedLayer()) {
			this.save_Layer(gISVectorObject, this.layer);
		}
		//Disabled save for property: timeSeries
		//Disabled save for property: organization
	}
	
	
	
	//////////////
	// toString //
	//////////////
	
	@Override
	protected Map<String, Object> toStringData() {
		Map<String, Object> data = super.toStringData();
		data.put("uid", this.uid);
		data.put("name", this.name);
		data.put("creationDate", this.creationDate);
		data.put("type", this.type);
		data.put("formInstance", this.formInstance);
		data.put("point", this.point);
		data.put("line", this.line);
		data.put("polygon", this.polygon);
		data.put("layer", this.layer);
		data.put("timeSeries", this.timeSeries);
		data.put("organization", this.organization);
		return data;
	}
	
}
