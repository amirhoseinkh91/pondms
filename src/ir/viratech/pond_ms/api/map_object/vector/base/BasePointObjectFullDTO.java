package ir.viratech.pond_ms.api.map_object.vector.base;

import static ir.viratech.commons.api.field_info.FieldInfoContextProvider.getFieldInfoContextInstance;
import ir.viratech.pond_ms.api.map_object.vector.dto.PointObjectFullDTO;
import ir.viratech.pond_ms.model.map_object.vector.PointObject;

import java.util.Map;

import com.fasterxml.jackson.annotation.JsonProperty;


/**
 * A base DTO for class "PointObject".
 * Do not edit this file.
 * It is an automatically generated class.
 *
 */
public abstract class BasePointObjectFullDTO extends ir.viratech.commons.api.dto.AbstractFullDTO<PointObject> {
	
	
	/**
	 * 
	 * Base FieldInfoContext for "PointObjectFullDTO".
	 *
	 */
	public static abstract class BaseFieldInfoContext extends ir.viratech.commons.api.search.field.AbstractFieldInfoContext<PointObjectFullDTO> {
		
		
		// =========== BEGIN createFieldInfo methods ===========
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "uid".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Uid(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "name".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Name(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "creationDate".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_CreationDate(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_Timestamp(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "formInstances".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_FormInstances(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		/**
		 * creates a PrimitiveFieldInfo for primitive property "point".
		 * @param externalName the external name of the property in the DTO class
		 * @param internalName the internal name of the property in the entity class
		 * @param internalSearchExpression the internal search expression by which the property could be really searched
		 * @param typeKey a key showing the type of the property (used in client side) 
		 * @param bundleKey Used for i18n translation of the property
		 * @param searchable true if the property could be accessed in client search queries
		 * @param sortable true if the property could be used for sorting in client search queries
		 * @return the FieldInfo created for the property
		 */
		protected ir.viratech.commons.api.search.field.PrimitiveFieldInfo<?> createFieldInfo_Point(
				String externalName, String internalName, String internalSearchExpression, String typeKey, String bundleKey, boolean searchable, Boolean sortable) {
			return new ir.viratech.commons.api.search.field.types.FieldInfo_String(externalName, internalName, internalSearchExpression, typeKey, bundleKey, searchable, sortable);
		}
		
		
		// =========== END createFieldInfo methods ===========
		
		/**
		 * The default constructor for BaseFieldInfoContext.
		 */
		protected BaseFieldInfoContext() {
			this.putFieldInfo(this.createFieldInfo_Uid("uid", "extuid", "extuid", null, "uid", true, false));
			this.putFieldInfo(this.createFieldInfo_Name("name", "name", "name", null, "name", true, null));
			this.putFieldInfo(this.createFieldInfo_CreationDate("creationDate", "creationDate", "creationDate", null, "creationDate", true, true));
			this.putFieldInfo(this.createFieldInfo_FormInstances("formInstances", "formInstances", "formInstances", "collection", "formInstances", true, null));
			this.putFieldInfo(this.createFieldInfo_Point("point", "point", "point", "string", "point", true, null));
		}
		
		/**
		 * Creates a DTO of type "PointObjectFullDTO".
		 *
		 * @return the created DTO
		 */
		@Override
		public PointObjectFullDTO createDto() {
			return new PointObjectFullDTO();
		}
		
	}
	
	/**
	 * Provides the corresponding FieldInfoContext of this DTO.
	 *
	 * @return the corresponding FieldInfoContext object
	 */
	public PointObjectFullDTO.FieldInfoContext getFieldInfoContext() {
		return getFieldInfoContextInstance(PointObjectFullDTO.FieldInfoContext.class);
	}
	
	
	
	
	////////////////////
	// DTO Properties //
	////////////////////
	
	// uid
	
	private String uid;
	
	/**
	 * Getter for property "uid".
	 *
	 * @return the value of property "uid"
	 */
	@JsonProperty
	public String getUid() {
		return this.uid;
	}
	
	
	// name
	
	private String name;
	
	/**
	 * Getter for property "name".
	 *
	 * @return the value of property "name"
	 */
	@JsonProperty
	public String getName() {
		return this.name;
	}
	
	/**
	 * Setter for property "name".
	 *
	 * @param name the new value for property "name"
	 */
	public void setName(String name) {
		this.name = name;
	}
	
	/**
	/**
	 * Used for saving a given value of property name to a given internal entity.
	 * 
	 * @param pointObject
	 * 		the given internal entity
	 * @param name 
	 * 		the value of property name which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property name is not appropriate for saving the entity
	 */
	protected void save_Name(PointObject pointObject, String name)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException {
		pointObject.setName((String) name);
	}
	
	
	// creationDate
	
	private java.util.Date creationDate;
	
	/**
	 * Getter for property "creationDate".
	 *
	 * @return the value of property "creationDate"
	 */
	@JsonProperty
	public java.util.Date getCreationDate() {
		return this.creationDate;
	}
	
	
	// formInstances
	
	private com.fasterxml.jackson.databind.node.ArrayNode formInstances;
	
	/**
	 * Getter for property "formInstances".
	 *
	 * @return the value of property "formInstances"
	 */
	@JsonProperty
	public com.fasterxml.jackson.databind.node.ArrayNode getFormInstances() {
		return this.formInstances;
	}
	
	/**
	 * Setter for property "formInstances".
	 *
	 * @param formInstances the new value for property "formInstances"
	 */
	public void setFormInstances(com.fasterxml.jackson.databind.node.ArrayNode formInstances) {
		this.formInstances = formInstances;
	}
	
	/**
	 * Used for loading the property formInstances from a given internal entity.
	 * 
	 * @param pointObject the given internal entity
	 * @return the value of property formInstances based on the given internal entity
	 */
	protected abstract com.fasterxml.jackson.databind.node.ArrayNode load_FormInstances(PointObject pointObject);
	
	/**
	/**
	 * Used for saving a given value of property formInstances to a given internal entity.
	 * 
	 * @param pointObject
	 * 		the given internal entity
	 * @param formInstances 
	 * 		the value of property formInstances which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property formInstances is not appropriate for saving the entity
	 */
	protected abstract void save_FormInstances(PointObject pointObject, com.fasterxml.jackson.databind.node.ArrayNode formInstances)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException;
	
	
	// point
	
	private ir.viratech.pond_ms.commons.geo.Point point;
	
	/**
	 * Getter for property "point".
	 *
	 * @return the value of property "point"
	 */
	@JsonProperty
	public ir.viratech.pond_ms.commons.geo.Point getPoint() {
		return this.point;
	}
	
	/**
	 * Setter for property "point".
	 *
	 * @param point the new value for property "point"
	 */
	public void setPoint(ir.viratech.pond_ms.commons.geo.Point point) {
		this.point = point;
	}
	
	/**
	 * Used for loading the property point from a given internal entity.
	 * 
	 * @param pointObject the given internal entity
	 * @return the value of property point based on the given internal entity
	 */
	protected abstract ir.viratech.pond_ms.commons.geo.Point load_Point(PointObject pointObject);
	
	/**
	/**
	 * Used for saving a given value of property point to a given internal entity.
	 * 
	 * @param pointObject
	 * 		the given internal entity
	 * @param point 
	 * 		the value of property point which should be saved to the given internal entity
	 * @throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException 
	 * 		if the given value of property point is not appropriate for saving the entity
	 */
	protected abstract void save_Point(PointObject pointObject, ir.viratech.pond_ms.commons.geo.Point point)
			throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException;
	
	
	
	/////////////////////////
	// save/load functions //
	/////////////////////////
	
	/**
	 * Loads this DTO from an entity object of type "PointObject".
	 * 
	 * @param pointObject the entity object from which this DTO is loaded. 
	 */
	@Override
	public void loadFrom(PointObject pointObject) {
		this.uid = pointObject.getExtuid();
		this.name = pointObject.getName();
		this.creationDate = pointObject.getCreationDate();
		this.formInstances = this.load_FormInstances(pointObject);
		this.point = this.load_Point(pointObject);
	}
	
	/**
	 * Saves this DTO to an entity object of type "PointObject".
	 * 
	 * @param pointObject the entity object to which this DTO is saved. 
	 * @throws BadDtoEntityModificationException If this DTO is not valid for saving. 
	 */
	@Override
	public void saveTo(PointObject pointObject) throws ir.viratech.commons.api.entity_modifier.BadDtoEntityModificationException {
		//Disabled save for property: uid
		this.save_Name(pointObject, this.name);
		//Disabled save for property: creationDate
		this.save_FormInstances(pointObject, this.formInstances);
		this.save_Point(pointObject, this.point);
	}
	
	
	
	//////////////
	// toString //
	//////////////
	
	@Override
	protected Map<String, Object> toStringData() {
		Map<String, Object> data = super.toStringData();
		data.put("uid", this.uid);
		data.put("name", this.name);
		data.put("creationDate", this.creationDate);
		data.put("formInstances", this.formInstances);
		data.put("point", this.point);
		return data;
	}
	
}
